import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import matplotlib.pyplot as plt
from utils.token_manager import get_gspread_client
# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet =====
SHEET_NAME = "Contact Information (Responses)"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
import streamlit as st
import altair as alt
from api.fujikaservice_rest_api import fetch_all_products

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
client = get_gspread_client()

sheet = client.open(SHEET_NAME).sheet1
rows = sheet.get_all_values()

# ===== ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame =====
df = pd.DataFrame(rows[1:], columns=rows[0])

# ===== ‡∏•‡∏ö column ‡∏ã‡πâ‡∏≥ =====
df = df.loc[:, ~df.columns.duplicated()]

# ===== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A‚Äìs (0‚Äì19) =====
df_selected = df.iloc[:, :19]

# ===== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡πà‡∏≤ Model =====
df_selected['Model'] = df_selected['Model'].str.strip()

# ===== ‡∏ô‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
model_series = df_selected['Model']
model_counts = model_series.value_counts()
top_models = model_counts.head(3)

# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Dashboard =====
st.set_page_config(page_title="üìä Dashboard ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°", layout="wide")

st.title("üìä Dashboard ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Form")
st.markdown(
    """
    <style>
    .stApp {
        background-color: #f0f2f6;  /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ===== ‡∏ï‡∏±‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Model =====
st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model")

st.markdown(
    """
    <style>
    textarea {
        background-color: #ffffff !important;  /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
        color: #000000 !important;             /* ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥ */
        border: 2px solid #cccccc !important;  /* ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
        border-radius: 10px !important;
        padding: 0px !important;

    }
    </style>
    """,
    unsafe_allow_html=True
)

search_model = st.text_area("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Model" , height=10)


if search_model:
    search_model_clean = search_model.strip()

    if search_model_clean in df_selected['Model'].values:
        rank = model_counts.index.get_loc(search_model_clean) + 1
        count = model_counts[search_model_clean]

        st.success(f"Model {search_model_clean} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {rank} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {count})")

        with st.expander(f"üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Model {search_model_clean}"):
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Model
            model_data = df_selected[df_selected['Model'] == search_model_clean]

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            columns_to_show = ['Timestamp', 'Address - ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 
                               '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°', '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô']
            columns_exist = [col for col in columns_to_show if col in model_data.columns]
            model_data_filtered = model_data[columns_exist]

            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ column ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
            new_names = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°", "‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô"]
            model_data_filtered.columns = new_names[:len(columns_exist)]

            # ‡πÅ‡∏™‡∏î‡∏á DataFrame
            st.dataframe(model_data_filtered)

    else:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {search_model_clean} ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ===== ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
st.subheader("3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
st.bar_chart(top_models)

st.markdown("---")
import altair as alt
import streamlit as st

if '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' in df_selected.columns:
    st.subheader("üìä ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")

    # ====== 1. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ======
    channel_counts = df_selected['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].value_counts().reset_index()
    channel_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

    # ====== 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ======
    total_orders = channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].sum()
    channel_counts['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå'] = (channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'] / total_orders * 100).round(2)

    # ====== 3. ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ======
    max_channel = channel_counts.iloc[0]
    min_channel = channel_counts.iloc[-1]

    # ====== 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á ======
    bars = alt.Chart(channel_counts).mark_bar(size=25).encode(
        x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
        y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
        color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N',
        tooltip=['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']
    )

    # ====== 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á ======
    text = alt.Chart(channel_counts).mark_text(
        align='left',
        baseline='middle',
        dx=3  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á
    ).encode(
        x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
        y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
        text=alt.Text('‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:Q', format='.2f')
    )

    # ====== 6. ‡∏£‡∏ß‡∏°‡πÅ‡∏ó‡πà‡∏á + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ======
    chart = (bars + text).properties(height=300)

    st.altair_chart(chart, use_container_width=True)

    # ====== 7. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å/‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î ======
    st.markdown(f"""
    <div style="
        padding: 8px 12px; 
        background-color:#d4edda; 
        color:#155724; 
        border-radius:5px; 
        width: fit-content;
        display:inline-block;
        margin-bottom:5px;
        font-size:14px;
    ">
    üìà ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{max_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({max_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {max_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
    </div>
    """, unsafe_allow_html=True)

    st.markdown(f"""
    <div style="
        padding: 8px 12px; 
        background-color:#fff3cd; 
        color:#856404; 
        border-radius:5px; 
        width: fit-content;
        display:inline-block;
        font-size:14px;
    ">
    üìâ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{min_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({min_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {min_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
    </div>
    """, unsafe_allow_html=True)


st.markdown("----")
st.markdown("---")
if '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô' in df_selected.columns:
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô")

    know_counts = df_selected['‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô'].value_counts().reset_index()
    know_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

    fig = px.pie(
        know_counts,
        names='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
        values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
        color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
        color_discrete_sequence=px.colors.qualitative.Set3,
        hole=0.4  # ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô donut chart
    )
    st.plotly_chart(fig, use_container_width=True)



st.subheader("üìÑ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
df_feedback = df_selected[
    df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].notna() & 
    (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "") &
    (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "-")
].copy()  # copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ warning

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
df_feedback.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', range(1, len(df_feedback)+1))

# ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏û‡∏£‡πâ‡∏≠‡∏° '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
columns_to_show = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', 'Model', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°']
st.dataframe(df_feedback[columns_to_show])

# ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ï‡πà‡∏≠ Model
feedback_counts = df_feedback.groupby('Model').size().reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞')
total_feedback = len(df_feedback)
st.markdown(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_feedback} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")


st.title("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ FujikaService realtime from website")

# ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products =====
@st.cache_data(ttl=600)
def get_products():
    return fetch_all_products()

df_products = get_products()

if df_products.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    st.stop()

# ===== ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ / ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ =====
st.subheader("üí• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ / üìâ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ")
top_selling = df_products.sort_values(by='rating_count', ascending=False).head(5)
bottom_selling = df_products.sort_values(by='rating_count').head(5)

col1, col2 = st.columns(2)
with col1:
    st.markdown("### üí• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
    st.dataframe(top_selling[['name', 'rating_count', 'stock_quantity', 'average_rating']])
with col2:
    st.markdown("### üìâ ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
    st.dataframe(bottom_selling[['name', 'rating_count', 'stock_quantity', 'average_rating']])

# ===== ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ =====
st.subheader("‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà")
low_stock = df_products.sort_values(by='stock_quantity').head(5)
st.dataframe(low_stock[['name', 'stock_quantity']])

# ===== ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ =====
st.subheader("‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
best_rated = df_products.sort_values(by='average_rating', ascending=False).head(5)
st.dataframe(best_rated[['name', 'average_rating', 'rating_count']])

# ===== ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß =====
st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ (Top 10 ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)")
top10 = df_products.sort_values(by='rating_count', ascending=False).head(10)
chart = alt.Chart(top10).mark_bar().encode(
    x=alt.X('rating_count:Q', title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'),
    y=alt.Y('name:N', sort='-x', title='‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'),
    color='rating_count:Q',
    tooltip=['name', 'rating_count', 'stock_quantity', 'average_rating']
).properties(height=400)
st.altair_chart(chart, use_container_width=True)
