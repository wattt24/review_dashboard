# utils/lazada_auth.py
import uuid
import urllib.parse
import os
import time, hmac, hashlib
import requests
import json
from datetime import datetime
from datetime import datetime, timedelta
from utils.token_manager import get_gspread_client , save_token , get_latest_token# ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö mapping ‡∏•‡∏á Google Sheet
from utils.config import (LAZADA_APP_ID, LAZADA_REDIRECT_URI, GOOGLE_SHEET_ID, LAZADA_APP_SECRET)
LAZADA_ACCESS_TOKEN = None
from lazop.base import LazopClient, LazopRequest
def lazada_generate_state(store_id):
    # state ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô unique + ‡∏¢‡∏≤‡∏Å‡πÄ‡∏î‡∏≤
    return f"{store_id}-{uuid.uuid4().hex}"
# Authorization
# ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö Lazada
def lookup_store_from_state(state: str):
    """‡∏≠‡πà‡∏≤‡∏ô store_id ‡∏à‡∏≤‡∏Å state ‡πÉ‡∏ô Google Sheet"""
    client = get_gspread_client()
    ss = client.open_by_key(GOOGLE_SHEET_ID)
    try:
        ws = ss.worksheet("state_mapping")
    except Exception:
        return None
    records = ws.get_all_records()
    for r in records:
        if r.get("state") == state:
            return r.get("store_id")
    return None


def lazada_save_state_mapping_to_sheet(state, store_id):
    """‡πÄ‡∏Å‡πá‡∏ö mapping state ‚Üí store_id ‡∏•‡∏á Google Sheet"""
    client = get_gspread_client()
    ss = client.open_by_key(GOOGLE_SHEET_ID)
    try:
        ws = ss.worksheet("state_mapping")
    except Exception:
        ws = ss.add_worksheet("state_mapping", rows=1000, cols=10)
        ws.append_row(["state", "store_id", "created_at"])
    ws.append_row([state, store_id, datetime.utcnow().isoformat()])

def lazada_get_auth_url_for_store(store_id: str) -> str:
    """
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö generate ‡∏•‡∏¥‡∏á‡∏Å‡πå Lazada Authorization ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    """
    state = lazada_generate_state(store_id)
    lazada_save_state_mapping_to_sheet(state, store_id)
    return build_lazada_auth_url(state)
def build_lazada_auth_url(state):
    base = "https://auth.lazada.com/oauth/authorize"
    params = {
        "response_type": "code",
        "client_id": LAZADA_APP_ID,
        "redirect_uri": LAZADA_REDIRECT_URI,  # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô raw
        "state": state,
        "force_auth": "true",
        "country": "th",
    }
    qs = urllib.parse.urlencode(params)  # urlencode ‡∏à‡∏∞ encode ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    return f"{base}?{qs}"
# ‡∏™‡∏£‡πâ‡∏≤‡∏á sign ‡πÄ‡∏û‡∏∑‡πà‡∏≠  generate token
def lazada_generate_sign(params: dict, app_secret: str) -> str:
    # 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á key ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    sorted_params = sorted(params.items(), key=lambda x: x[0])
    # 2. ‡∏ï‡πà‡∏≠ string ‡πÄ‡∏õ‡πá‡∏ô k1v1k2v2...
    base_string = "".join(f"{k}{v}" for k, v in sorted_params)
    # 3. HMAC-SHA256
    sign = hmac.new(
        app_secret.encode("utf-8"),
        base_string.encode("utf-8"),
        hashlib.sha256
    ).hexdigest().upper()
    print("Base string for HMAC:", base_string)
    return sign
#‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
def lazada_exchange_token(code: str):
    """
    ‡πÅ‡∏•‡∏Å authorization code ‡∏à‡∏≤‡∏Å Lazada ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ access_token ‡πÅ‡∏•‡∏∞ refresh_token
    ‡∏û‡∏£‡πâ‡∏≠‡∏° debug log ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    """
    try:
        path = "/auth/token/create"
        url = f"https://auth.lazada.com/rest{path}"

        # ‚úÖ ‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà Lazada ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        params = {
            "app_key": LAZADA_APP_ID,
            "code": code,
            "sign_method": "sha256",
            "timestamp": str(int(time.time() * 1000))
        }

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ A-Z
        sorted_items = sorted(params.items())
        concatenated = ''.join([f"{k}{v}" for k, v in sorted_items])

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á base string ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢ HMAC-SHA256
        base_string = path + concatenated
        sign_bytes = hmac.new(
            LAZADA_APP_SECRET.encode("utf-8"),
            base_string.encode("utf-8"),
            hashlib.sha256
        ).hexdigest().upper()

        params["sign"] = sign_bytes

        # üß© DEBUG LOG DETAIL
        print("\n==================== LAZADA TOKEN DEBUG ====================")
        print("‚è∞ Local UTC Time:", time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime()))
        print("üåç Endpoint URL:", url)
        print("üßæ Raw Parameters (Before sort):", json.dumps(params, indent=2))
        print("üî° Sorted & Concatenated Params:", concatenated)
        print("üßÆ Base String to Sign:", base_string)
        print("üîê App Secret (hidden):", LAZADA_APP_SECRET[:4] + "..." + LAZADA_APP_SECRET[-4:])
        print("‚úÖ Generated Signature:", sign_bytes)
        print("üì§ Sending POST request to Lazada...")
        print("============================================================\n")

        # ‚úÖ ‡∏™‡πà‡∏á request (‡πÉ‡∏ä‡πâ POST)
        response = requests.post(url, data=params, timeout=10)

        print("üì¨ HTTP Status Code:", response.status_code)

        try:
            data = response.json()
        except Exception:
            print("‚ö†Ô∏è Failed to decode JSON, raw text returned.")
            data = {"raw_text": response.text}

        print("üîπ Lazada token response:", json.dumps(data, indent=2))
        print("============================================================\n")

        return data

    except Exception as e:
        print("‚ùå Error exchanging token:", str(e))
        return {"error": str(e)}
# ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á sdk ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API
def call_lazada_api(endpoint, method="GET", params=None):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡∏ú‡πà‡∏≤‡∏ô SDK
    """
    try:
        client = LazopClient("https://api.lazada.co.th/rest", LAZADA_APP_ID, LAZADA_APP_SECRET)
        request = LazopRequest(endpoint, method)

        if params:
            for k, v in params.items():
                request.add_api_param(k, str(v))

        response = client.execute(request, LAZADA_ACCESS_TOKEN)

        # ‚úÖ ‡∏ö‡∏≤‡∏á SDK ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô dict, ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏ô string
        if isinstance(response.body, (str, bytes)):
            data = json.loads(response.body)
        else:
            data = response.body

        return data

    except Exception as e:
        print(f"‚ùå Error calling Lazada API: {str(e)}")
        return {"error": str(e)}


# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ======

def lazada_get_products(offset=0, limit=10):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
    """
    return call_lazada_api(
        endpoint="/products/get",
        method="GET",
        params={
            "offset": offset,
            "limit": limit
        }
    )

# ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
def lazada_refresh_access_token(account_id):
    """
    üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Lazada Access Token ‡∏ú‡πà‡∏≤‡∏ô Lazop SDK ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheet
    """
    # ‡∏î‡∏∂‡∏á refresh_token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Google Sheet
    token_data = get_latest_token(platform="lazada", account_id=seller_id)
    if not token_data or not token_data.get("refresh_token"):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö refresh_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö account_id {account_id}")
        return None

    refresh_token = token_data["refresh_token"]

    print("\n================ Lazada API Debug Info ================")
    print(f"üîπ API Name: /auth/token/refresh")
    print(f"üîπ Refresh Token: {refresh_token}")
    print(f"üîπ Account ID: {seller_id}")
    print("=======================================================\n")

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô SDK ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    response = call_lazada_api(
        endpoint="/auth/token/refresh",
        method="POST",
        params={"refresh_token": refresh_token}
    )

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if not response:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• response ‡∏à‡∏≤‡∏Å Lazada SDK")
        return None

    data = response.get("data") or response  # ‡∏ö‡∏≤‡∏á SDK ‡∏´‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "data"

    access_token = data.get("access_token")
    new_refresh = data.get("refresh_token")
    expires_in = data.get("expires_in")

    if access_token and new_refresh:
        
        seller_id = data.get("account")  # Lazada seller ID
        save_token(
            platform="lazada",
            account_id=seller_id,
            access_token=access_token,
            refresh_token=new_refresh,
            expires_in=expires_in
        )
        expire_time = datetime.datetime.now() + datetime.timedelta(seconds=expires_in)
        print(f"‚úÖ Lazada token refreshed successfully (expires at {expire_time})")
    else:
        print("‚ùå Failed to refresh Lazada access token:", response)

    return response


