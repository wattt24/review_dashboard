# #pages/admin_dashboard.py
# import os
# import sys
# import pandas as pd
# import numpy as np
# import streamlit as st
# from utils.config import SHOPEE_SHOP_ID
# import altair as alt
# import plotly.express as px
# import matplotlib.pyplot as plt
# from utils.token_manager import get_gspread_client
# from api.fujikaservice_rest_api import fetch_all_products_fujikaservice
# from datetime import datetime, timedelta
# from database.all_database import get_all_reviews, get_reviews_by_period
# from database.all_database import get_connection
# from api.fujikaservice_rest_api import *
# from api.facebook_graph_api import get_page_info, get_page_posts, get_page_reviews
# from api.line_oa_processing import fetch_line_messages, analyze_messages, summarize_categories, summarize_confidence
# from utils.config import FACEBOOK_PAGE_HEATER_ID, FACEBOOK_PAGE_BBQ_ID
# from services.gsc_fujikathailand import *  # ‡∏î‡∏∂‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
# st.set_page_config(page_title="Fujika Dashboard",page_icon="üåé", layout="wide")
# sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# from api.fujikathailand_rest_api import *
# # from services.gsc_fujikathailand import *
# from collections import defaultdict
# # service_products = fetch_service_all_products()
# # products = service_products 
# sales_data, buyers_list, total_orders = fetch_sales_and_buyers_all(order_status="completed")
# import json

# client = get_gspread_client()
# sheet = client.open_by_key(os.environ["GOOGLE_SHEET_ID"] or st.secrets["GOOGLE_SHEET_ID"]).sheet1
# def make_safe_for_streamlit(df):
#     """‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å column object/list/dict ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ"""
#     for col in df.columns:
#         if df[col].dtype == "object":
#             df[col] = df[col].apply(lambda x: json.dumps(x) if isinstance(x, (list, dict)) else str(x))
#     return df

# def app():
        
#     if "role" not in st.session_state or st.session_state["role"] != "admin":
#         st.error("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
#         st.stop()

#     st.title("üìä Dashboard's ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°")

#     view = st.selectbox("üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", ["Highlights Overview","‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á" ])


#     if view == "Highlights Overview":
        
#         st.title("Highlights Overview")
   

#         st.set_page_config(
#             page_title="Review Insight Dashboard",
#             page_icon="üìä",
#             layout="wide"
#         )


#         st.markdown("""
#         <style>
#             .main {
#                 background-color: #f8f9fa;
#                 font-family: 'Segoe UI', sans-serif;
#             }
#             h1, h2, h3 {
#                 color: #1e3a8a;
#             }
#             .stMetric {
#                 background-color: #ffffff;
#                 border-radius: 12px;
#                 box-shadow: 0px 1px 3px rgba(0,0,0,0.1);
#                 padding: 10px;
#             }
#         </style>
#         """, unsafe_allow_html=True)

#         # üè∑Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
#         st.title("üìä Review Insight Dashboard")
#         st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
#         st.divider()

#         # üîΩ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         with st.container():
#             col1, col2, col3 = st.columns([1,1,1])

#             with col1:
#                 period_option = st.selectbox(
#                     "üïí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
#                     ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ")
#                 )

#             with col2:
#                 platform_option = st.selectbox(
#                     "üåê ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
#                     ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "fujikathailand", "FACEBOOK", "SHOPEE", "LAZADA" , "LINE")
#                 )

#             with col3:
#                 show_chart = st.toggle("üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ", value=True)

#         # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
#         months = None
#         if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
#             months = 1
#         elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
#             months = 3
#         elif period_option == "1 ‡∏õ‡∏µ":
#             months = 12

#         # üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß..."):
#             if months:
#                 df = get_reviews_by_period(
#                     platform=None if platform_option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else platform_option,
#                     months=months
#                 )
#             else:
#                 df = get_all_reviews(
#                     platform=None if platform_option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else platform_option
#                 )

#         # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         if df is not None and not df.empty:
#             total_reviews = len(df)
#             st.success(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_reviews:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

#             # üß† ‡∏™‡∏£‡∏∏‡∏õ sentiment
#             if "sentiment" in df.columns:
#                 col1, col2, col3 = st.columns(3)
#                 positive = len(df[df["sentiment"] == "positive"])
#                 negative = len(df[df["sentiment"] == "negative"])
#                 neutral = len(df[df["sentiment"] == "neutral"])

#                 col1.metric("üòä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å", f"{positive:,}")
#                 col2.metric("üòê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÜ", f"{neutral:,}")
#                 col3.metric("üò† ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö", f"{negative:,}")

#             # üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ
#             if show_chart and "review_date" in df.columns:
#                 st.divider()
#                 st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")

#                 try:
#                     df["review_date"] = pd.to_datetime(df["review_date"])
#                     df["month"] = df["review_date"].dt.to_period("M").astype(str)
#                     trend_df = df.groupby("month").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")

#                     fig = px.line(
#                         trend_df,
#                         x="month", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
#                         markers=True,
#                         title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
#                         color_discrete_sequence=["#1d4ed8"]
#                     )
#                     fig.update_layout(xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
#                     st.plotly_chart(fig, use_container_width=True)
#                 except Exception as e:
#                     st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ: {e}")

#             # üßæ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏õ‡∏∏‡πà‡∏° Export
#             st.divider()
#             display_df = df.rename(columns={
#                 "platform": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
#                 "shop_id": "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
#                 "review_text": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
#                 "sentiment": "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
#                 "review_date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
#             })

#             # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
#             display_df = display_df.copy()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SettingWithCopyWarning
#             display_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(display_df) + 1))

#             # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
#             st.dataframe(
#                 display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
#                 use_container_width=True,
#                 height=550
#             )


#             # üíæ ‡∏õ‡∏∏‡πà‡∏° Export
#             csv_data = df[["platform", "shop_id", "review_text", "sentiment", "review_date"]].to_csv(index=False, encoding='utf-8-sig')
#             st.download_button(
#                 label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô CSV",
#                 data=csv_data,
#                 file_name=f"review_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
#                 mime="text/csv"
#             )

#         else:
#             st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

#         if "platform" in df.columns:
#             st.divider()
#             st.subheader("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°")
#             platform_df = df.groupby("platform").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
#             platform_df = platform_df.sort_values(by="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)

#             # ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°


#         # üìä Top Platform (‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)

#         if "platform" in df.columns:
#             platform_df = df.groupby("platform").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
#             platform_df = platform_df.sort_values(by="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)
#             top_platforms = platform_df.head(3)  # Top 3

#             st.divider()
#             st.subheader("üèÜ Top 3 ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")

#             # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ gradient ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
#             gradients = [
#                 "linear-gradient(135deg, #4f46e5, #3b82f6)",  # ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1
#                 "linear-gradient(135deg, #10b981, #06b6d4)",  # ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 2
#                 "linear-gradient(135deg, #f472b6, #f59e0b)"   # ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 3
#             ]

#             cols = st.columns(3)
#             for i, (index, row) in enumerate(top_platforms.iterrows()):
#                 with cols[i]:
#                     st.markdown(f"""
#                     <div style="
#                         background: {gradients[i]};
#                         color: white;
#                         padding: 25px;
#                         border-radius: 20px;
#                         text-align: center;
#                         box-shadow: 0 8px 20px rgba(0,0,0,0.2);
#                     ">
#                         <h2 style="margin: 0; font-size: 36px; font-weight: bold;">{i+1}. {row['platform'].upper()}</h2>
#                         <p style="margin: 5px 0 0; font-size: 22px; font-weight: 500;">{row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß']:,} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</p>
#                     </div>
#                     """, unsafe_allow_html=True)


         






        




#     elif view == "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á":

#         tabs = st.tabs([
#             "üì∞ Fujikathailand.com",
#             "üè≠ CPSManu.com",
#             "üõ†Ô∏è FujikaService.com",
#             " Shopee",
#             " Lazada",
#             "üìò Facebook",
#             "üí¨ LINE OA"
#         ])

    

#         # --------------------- 1. Fujikathailand ---------------------
#         with tabs[0]:
#             st.header("üì∞ Website Fujikathailand.com")
#             df_gsc_fujikathailand = get_gsc_data()


#                        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GSC
#             df_gsc_fujikathailand = get_gsc_data()
        
#             if not df_gsc_fujikathailand.empty:
#                 st.subheader("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (Top Keywords)")
#                 st.dataframe(df_gsc_fujikathailand.sort_values('clicks', ascending=False))

#                 df_plot = df_gsc_fujikathailand.rename(columns={
#                     "query": "‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
#                     "clicks": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å",
#                     "impressions": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•",
#                     "ctr": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å (%)",
#                     "position": "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
#                 })

#                 fig = px.bar(
#                     df_plot.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å', ascending=False),
#                     x='‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
#                     y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å',
#                     hover_data=['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å (%)', '‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢']
#                 )
#                 st.plotly_chart(fig, use_container_width=True)
#             else:
#                 st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Search Console")



#             conn = get_connection()
#             df_focus_fujikathailand = pd.read_sql("SELECT * FROM reviews_history LIMIT 50", conn)
#             conn.close()
#             # print(df.head())
#             print(f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏≠ {len(df_focus_fujikathailand)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            


#             products, buyers, total_orders = fetch_all_product_sales()
#             st.subheader("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
#             st.markdown(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
#             st.markdown(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≤‡∏¢ {total_orders} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                
#             # -------------------- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ --------------------
#             # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
#             products_sold = [p for p in products if p["quantity_sold"] > 0]

#             # ------------------ ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ ------------------
#             if products_sold:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
#                 st.markdown("## üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

#                 # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ---
#                 products_sold_renamed = []
#                 for p in products_sold:
#                     products_sold_renamed.append({
#                         "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": p["name"],
#                         "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ": p["quantity_sold"],
#                         "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°": p["total_revenue"]
#                     })
#             if products_sold:
#                 best_selling = max(products_sold, key=lambda x: x["quantity_sold"])
#                 st.markdown(f"**üìå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** {best_selling['name']} ({best_selling['quantity_sold']} ‡∏ä‡∏¥‡πâ‡∏ô)")

#                 # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ ---
#                 fig_qty = px.bar(
#                     products_sold_renamed,
#                     x="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
#                     y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
#                     hover_data=["‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"],
#                     title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
#                 )
#                 fig_qty.update_layout(xaxis_tickangle=-45)
#                 st.plotly_chart(fig_qty, use_container_width=True)
            
#                         # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô session_state
#                 if "show_products_table" not in st.session_state:
#                     st.session_state.show_products_table = False

#                 # ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
#                 if st.button("üõí ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="toggle_products_table_top"):
#                     st.session_state.show_products_table = not st.session_state.show_products_table

#                 # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
#                 if st.session_state.show_products_table:
#                     st.markdown("### üõí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 57 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

#                     # --- ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
#                     col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5, 1, 3, 1, 1, 1, 1.5])
#                     with col1: st.markdown("**‡∏•‡∏≥‡∏î‡∏±‡∏ö**")
#                     with col2: st.markdown("**‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**")
#                     with col3: st.markdown("**‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏£‡∏≤‡∏Ñ‡∏≤**")
#                     with col4: st.markdown("**‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠**")
#                     with col5: st.markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ**")
#                     with col6: st.markdown("**‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)**")
#                     with col7: st.markdown("**‡πÄ‡∏£‡∏ó‡∏ï‡∏¥‡πâ‡∏á**")

#                     st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á

#                     # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
#                     for idx, p in enumerate(products, start=1):
#                         col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5, 1, 3, 1, 1, 1, 1.5])
#                         with col1: st.markdown(f"{idx}")
#                         with col2: 
#                             if p.get("image_url"): st.image(p["image_url"], width=80)
#                         with col3:
#                             st.markdown(f"**{p.get('name','')}**")
#                             st.markdown(f"üíµ {p.get('price',0)} ‡∏ö‡∏≤‡∏ó")
#                         with col4: st.markdown(f"{p.get('stock_quantity',0)}")
#                         with col5: st.markdown(f"{p.get('quantity_sold',0)}")
#                         with col6: st.markdown(f"{p.get('total_revenue',0):,.2f}")
#                         with col7: st.markdown(f"{p.get('average_rating',0):.1f} ‚≠ê ({p.get('rating_count',0)})")

#                         st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß

#                     # --- ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ---
#                     st.write("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
#                     # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle
#                     def hide_table():
#                         st.session_state.show_products_table = False

#                     # --- ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ---
#                     st.write("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
#                     spacer1, spacer2, spacer3, spacer4, spacer5, spacer6, col_button = st.columns([1,1,1,1,1,1,1])
#                     col_button.button("‚ùå ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="toggle_products_table_bottom", on_click=hide_table)

                                    
#             # ------------------ ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° ------------------
#                 if products_sold:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
#                     st.markdown("## üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
#                     fig_rev = px.bar(
#                         products_sold,
#                         x="name",
#                         y="total_revenue",
#                         hover_data=["quantity_sold"],
#                         labels={"total_revenue": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"},
#                         title="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
#                     )
#                     fig_rev.update_layout(xaxis_tickangle=-45)
#                     st.plotly_chart(fig_rev, use_container_width=True)

#                 def summarize_buyers(buyers_list, group_by="email"):
#                     """
#                     ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
#                     """
#                     buyer_count = defaultdict(int)

#                     for b in buyers_list:
#                         key = b[group_by]  # ‡πÉ‡∏ä‡πâ email ‡∏´‡∏£‡∏∑‡∏≠ phone ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏
#                         buyer_count[key] += 1

#                     # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict
#                     result = [{"buyer": k, "purchase_count": v} for k, v in buyer_count.items()]
#                     return result
#                 # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
#                 products, buyers_list,total_orders = fetch_all_product_sales()

#                 # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ email ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏)
#                 buyer_summary = summarize_buyers(buyers_list, group_by="email")

#                 # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢
#                 df_buyers = pd.DataFrame(buyer_summary)
#                 # ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
#                 max_purchase = df_buyers['purchase_count'].max()
#                 st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
#                 st.dataframe(df_buyers[df_buyers['purchase_count'] == max_purchase])
#                 if st.checkbox("üóÇÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"):
#                     st.dataframe(make_safe_for_streamlit(buyers), use_container_width=True)

#                     # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á buyer_summary
#                 df_buyers = pd.DataFrame(buyer_summary)
#                 st.dataframe(make_safe_for_streamlit(df_buyers[df_buyers['purchase_count'] == max_purchase]))
#                 # ‡∏Å‡∏£‡∏≤‡∏ü Top 10 ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
#                 fig = px.scatter(
#                 df_buyers,
#                 x="buyer",               # ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ email/phone
#                 y="purchase_count",      # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
#                 size="purchase_count",   # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠
#                 color="purchase_count",  # ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠
#                 labels={"buyer": "‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", "purchase_count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠"},
#                 title="üõí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
#                 )

#                 fig.update_traces(marker=dict(opacity=0.7, line=dict(width=1, color='DarkSlateGrey')))
#                 fig.update_layout(xaxis_tickangle=-45)

#                 st.plotly_chart(fig, use_container_width=True)

#                 # -------------------- ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ --------------------
#                 st.subheader("üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
#                 if st.checkbox("üóÇÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á", key="show_table_1"):
                    
#                     st.dataframe(buyers, use_container_width=True)

#                 # -------------------- ‡πÅ‡∏¢‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ --------------------
#                 st.subheader("üåè ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
#                 if buyers:
#                     region_counts = {}
#                     for b in buyers:
#                         region = b.get("region", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
#                         region_counts[region] = region_counts.get(region, 0) + 1

#                 regions = list(region_counts.keys())
#                 counts = list(region_counts.values())

#                 fig_region = px.pie(
#                     names=regions,
#                     values=counts,
#                     title="‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ"
#                 )
#                 st.plotly_chart(fig_region, use_container_width=True)
                
#             st.subheader("üó∫Ô∏è ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (Choropleth Map)")
#             st.write("‚úÖ type(pd) =", type(pd))
#             df = pd.DataFrame(buyers_list)

#             # ‡∏™‡∏£‡πâ‡∏≤‡∏á province_counts
#             province_counts = df["province"].value_counts().reset_index()
#             province_counts.columns = ["province", "count"]

#             # ‡πÇ‡∏´‡∏•‡∏î GeoJSON ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
#             url = "https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json"
#             geojson = requests.get(url).json()

#             # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GeoJSON
#             thailand_provinces = [feature["properties"]["name"] for feature in geojson["features"]]
#             province_counts = province_counts[province_counts["province"].isin(thailand_provinces)]

#             # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
#             fig_map = px.choropleth_mapbox(
#                 province_counts,
#                 geojson=geojson,
#                 locations="province",
#                 featureidkey="properties.name",
#                 color="count",
#                 color_continuous_scale="Blues",
#                 mapbox_style="carto-positron",
#                 zoom=5,
#                 center={"lat": 13.736717, "lon": 100.523186},
#                 opacity=0.6,
#                 title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"
#             )

#             st.plotly_chart(fig_map, use_container_width=True)
#             st.markdown("---")
#             st.title("üìå Fujika WordPress Posts & Comments")

#             # -------------------- ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå --------------------
#             st.header("‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
#             try:
#                 posts = fetch_posts(per_page=5)
#             except Exception as e:
#                 st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ: {e}")
#                 posts = []

#             for p in posts:
#                 st.subheader(p["title"]["rendered"])
#                 st.markdown(p.get("excerpt", {}).get("rendered", ""), unsafe_allow_html=True)
                
#                 # -------------------- ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå --------------------
#                 post_id = p["id"]
#                 try:
#                     comments = fetch_comments(post_id)
#                 except Exception as e:
#                     st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå {post_id} ‡πÑ‡∏î‡πâ: {e}")
#                     comments = []

#                 if comments:
#                     st.markdown(f"**‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ({len(comments)})**")
#                     for c in comments:
#                         st.markdown(f"- **{c['author_name']}**: {c['content']['rendered']}", unsafe_allow_html=True)
#                 else:
#                     st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
            
#         # --------------------- 2. CPSManu ---------------------
#         with tabs[1]:
#             st.header("üè≠ WordPress Posts: cpsmanu.com")
#             st.write("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ""https://www.cpsmanu.com/")
#             st.title("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")


#             images = [
#                 {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-sh_gr.jpg", "link": "https://www.cpsmanu.com/water-heater/"},
#                 {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-pu_gr.jpg", "link": "https://www.cpsmanu.com/home-water-pump/"},
#                 {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-wa_gr.jpg", "link": "https://www.cpsmanu.com/water-purifier/"},
#                 {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-st_gr-.jpg", "link": "https://www.cpsmanu.com/electric-stove/"},
#                 {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-oem_gr.jpg", "link": "https://www.cpsmanu.com/oem-odm-services/"},
#             ]

#             cols = st.columns(len(images))

#             for col, img in zip(cols, images):
#                 with col:
#                     st.markdown(f'<a href="{img["link"]}" target="_blank"><img src="{img["url"]}" width="120" style="border-radius: 8px;"></a>', unsafe_allow_html=True)



#         # --------------------- 3. FujikaService ---------------------
#         with tabs[2]:

#             # ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet =====
#             SHEET_NAME = "Contact Information (Responses)"  # ‡∏à‡∏≤‡∏Å Google Sheet ‡∏ä‡∏∑‡πà‡∏≠ "Contact Information (Responses)"


#             # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#             client = get_gspread_client()

#             sheet = client.open(SHEET_NAME).sheet1
#             rows = sheet.get_all_values()

#             # ===== ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame =====
#             df = pd.DataFrame(rows[1:], columns=rows[0])

#             # ===== ‡∏•‡∏ö column ‡∏ã‡πâ‡∏≥ =====
#             df = df.loc[:, ~df.columns.duplicated()]

#             # ===== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A‚Äìs (0‚Äì19) =====
#             df_selected = df.iloc[:, :19]

#             # ===== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡πà‡∏≤ Model =====
#             df_selected['Model'] = df_selected['Model'].str.strip()

#             # ===== ‡∏ô‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
#             model_series = df_selected['Model']
#             model_counts = model_series.value_counts()
#             top_models = model_counts.head(3)

#             # ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Dashboard =====
#             st.set_page_config(page_title="üìä Dashboard ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°", layout="wide")

#             st.title("üìä Dashboard ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Form")
#             st.markdown(
#                 """
#                 <style>
#                 .stApp {
#                     background-color: #f0f2f6;  /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
#                 }
#                 </style>
#                 """,
#                 unsafe_allow_html=True
#             )

#             # ===== ‡∏ï‡∏±‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Model =====
#             st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model")

#             st.markdown(
#                 """
#                 <style>
#                 textarea {
#                     background-color: #ffffff !important;  /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
#                     color: #000000 !important;             /* ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥ */
#                     border: 2px solid #cccccc !important;  /* ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
#                     border-radius: 10px !important;
#                     padding: 0px !important;

#                 }
#                 </style>
#                 """,
#                 unsafe_allow_html=True
#             )

#             search_model = st.text_area("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Model" , height=10)


#             if search_model:
#                 search_model_clean = search_model.strip()

#                 if search_model_clean in df_selected['Model'].values:
#                     rank = model_counts.index.get_loc(search_model_clean) + 1
#                     count = model_counts[search_model_clean]

#                     st.success(f"Model {search_model_clean} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {rank} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {count})")

#                     with st.expander(f"üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Model {search_model_clean}"):
#                         # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Model
#                         model_data = df_selected[df_selected['Model'] == search_model_clean]

#                         # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
#                         columns_to_show = ['Timestamp', 'Address - ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 
#                                         '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°', '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô']
#                         columns_exist = [col for col in columns_to_show if col in model_data.columns]
#                         model_data_filtered = model_data[columns_exist]

#                         # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ column ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
#                         new_names = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°", "‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô"]
#                         model_data_filtered.columns = new_names[:len(columns_exist)]

#                         # ‡πÅ‡∏™‡∏î‡∏á DataFrame
#                         st.dataframe(model_data_filtered)

#                 else:
#                     st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {search_model_clean} ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

#             # ===== ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
#             st.subheader("3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
#             st.bar_chart(top_models)

#             st.markdown("---")

#             if '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' in df_selected.columns:
#                 st.subheader("üìä ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")

#                 # ====== 1. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ======
#                 channel_counts = df_selected['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].value_counts().reset_index()
#                 channel_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

#                 # ====== 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ======
#                 total_orders = channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].sum()
#                 channel_counts['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå'] = (channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'] / total_orders * 100).round(2)

#                 # ====== 3. ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ======
#                 max_channel = channel_counts.iloc[0]
#                 min_channel = channel_counts.iloc[-1]

#                 # ====== 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á ======
#                 bars = alt.Chart(channel_counts).mark_bar(size=25).encode(
#                     x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
#                     y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
#                     color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N',
#                     tooltip=['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']
#                 )

#                 # ====== 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á ======
#                 text = alt.Chart(channel_counts).mark_text(
#                     align='left',
#                     baseline='middle',
#                     dx=3  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á
#                 ).encode(
#                     x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
#                     y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
#                     text=alt.Text('‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:Q', format='.2f')
#                 )

#                 # ====== 6. ‡∏£‡∏ß‡∏°‡πÅ‡∏ó‡πà‡∏á + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ======
#                 chart = (bars + text).properties(height=300)

#                 st.altair_chart(chart, use_container_width=True)

#                 # ====== 7. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å/‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î ======
#                 st.markdown(f"""
#                 <div style="
#                     padding: 8px 12px; 
#                     background-color:#d4edda; 
#                     color:#155724; 
#                     border-radius:5px; 
#                     width: fit-content;
#                     display:inline-block;
#                     margin-bottom:5px;
#                     font-size:14px;
#                 ">
#                 üìà ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{max_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({max_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {max_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
#                 </div>
#                 """, unsafe_allow_html=True)

#                 st.markdown(f"""
#                 <div style="
#                     padding: 8px 12px; 
#                     background-color:#fff3cd; 
#                     color:#856404; 
#                     border-radius:5px; 
#                     width: fit-content;
#                     display:inline-block;
#                     font-size:14px;
#                 ">
#                 üìâ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{min_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({min_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {min_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
#                 </div>
#                 """, unsafe_allow_html=True)


#             st.markdown("----")
#             st.markdown("---")
#             if '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô' in df_selected.columns:
#                 st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô")

#                 know_counts = df_selected['‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô'].value_counts().reset_index()
#                 know_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

#                 fig = px.pie(
#                     know_counts,
#                     names='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
#                     values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
#                     color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
#                     color_discrete_sequence=px.colors.qualitative.Set3,
#                     hole=0.4  # ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô donut chart
#                 )
#                 st.plotly_chart(fig, use_container_width=True)



#             st.subheader("üìÑ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

#             # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
#             df_feedback = df_selected[
#                 df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].notna() & 
#                 (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "") &
#                 (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "-")
#             ].copy()  # copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ warning

#             # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
#             df_feedback.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', range(1, len(df_feedback)+1))

#             # ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏û‡∏£‡πâ‡∏≠‡∏° '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
#             columns_to_show = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', 'Model', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°']
#             st.dataframe(df_feedback[columns_to_show])

#             # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ï‡πà‡∏≠ Model
#             feedback_counts = df_feedback.groupby('Model').size().reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞')
#             total_feedback = len(df_feedback)
#             st.markdown(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_feedback} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")


#             st.title("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ FujikaService realtime from website")

#             # ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products =====
#             @st.cache_data(ttl=600)
#             def get_products_fujikaservice():
#                 return fetch_all_products_fujikaservice()

#             df_products = get_products_fujikaservice()

#             if df_products.empty:
#                 st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
#                 st.stop()

#             # ===== ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ / ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ =====
#             st.subheader("üí• ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ / üìâ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ")
#             top_selling = df_products.sort_values(by='rating_count', ascending=False).head(5)
#             bottom_selling = df_products.sort_values(by='rating_count').head(5)

#             col1, col2 = st.columns(2)
#             with col1:
#                 st.markdown("### üí• ‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
#                 st.dataframe(top_selling[['name', 'rating_count', 'stock_quantity', 'average_rating']])
#             with col2:
#                 st.markdown("### üìâ ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏µ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
#                 st.dataframe(bottom_selling[['name', 'rating_count', 'stock_quantity', 'average_rating']])

#             # ===== ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ =====
#             st.subheader("‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà")
#             low_stock = df_products.sort_values(by='stock_quantity').head(5)
#             st.dataframe(low_stock[['name', 'stock_quantity']])

#             # ===== ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ =====
#             st.subheader("‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
#             best_rated = df_products.sort_values(by='average_rating', ascending=False).head(5)
#             st.dataframe(best_rated[['name', 'average_rating', 'rating_count']])

#             # ===== ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß =====
#             st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ (Top 10 ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)")
#             top10 = df_products.sort_values(by='rating_count', ascending=False).head(10)
#             chart = alt.Chart(top10).mark_bar().encode(
#                 x=alt.X('rating_count:Q', title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'),
#                 y=alt.Y('name:N', sort='-x', title='‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'),
#                 color='rating_count:Q',
#                 tooltip=['name', 'rating_count', 'stock_quantity', 'average_rating']
#             ).properties(height=400)
#             st.altair_chart(chart, use_container_width=True)

#         with tabs[3]:
#             st.header("üõçÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee")
        


                
#         # --------------------- 5. Lazada ---------------------
#         with tabs[4]:
#             st.header("üì¶ Lazada Orders")
#             # if lazada_api.is_token_valid():
#             #     orders = lazada_api.get_orders()
#             #     st.dataframe(orders)
#             # else:
#             #     st.warning("‚ö†Ô∏è Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà")
#             #     st.markdown(f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Token ‡πÉ‡∏´‡∏°‡πà]({lazada_api.get_auth_url()})")

#         # --------------------- 6. Facebook Page / Ads ---------------------
#         with tabs[5]:
#             def render_page_info(page_info, page_id):#‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏à (‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏•‡πÇ‡∏Å‡πâ ID)
#                 if "error" in page_info:
#                     st.error(f"‚ùå Facebook API error: {page_info['error']}")
#                     return

#                 name = page_info.get("name", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à")
#                 picture = page_info.get("picture", {}).get("data", {}).get("url", "")

#                 st.markdown(
#                     f"""
#                     <div style="
#                         background-color:#f9f9f9;
#                         padding:20px;
#                         border-radius:15px;
#                         text-align:center;
#                         box-shadow:2px 2px 8px rgba(0,0,0,0.1);
#                         margin-bottom:20px;">
#                         <img src="{picture}" width="80" style="border-radius:50%;">
#                         <h3 style="margin:10px 0;">{name}</h3>
#                         <p>Page ID: {page_id}</p>
#                     </div>
#                     """,
#                     unsafe_allow_html=True
#                 )

#             def render_page_posts(posts, num_posts: int):
#                 """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
#                 st.subheader(f"üìù ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {num_posts} ‡πÇ‡∏û‡∏™‡∏ï‡πå")
#                 if not posts:
#                     st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
#                     return

#                 for post in posts:
#                     message = post.get("message", "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)")[:100]
#                     st.markdown(f"- [{message}...]({post['permalink_url']}) - {post['created_time']}")


#             def render_page_reviews(reviews, num_reviews: int):
#                 """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
#                 st.subheader(f"‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {num_reviews} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
#                 if not reviews:
#                     st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ")
#                     return

#                 for r in reviews:
#                     reviewer = r.get("reviewer", {}).get("name", "Anonymous")
#                     rating_type = r.get("recommendation_type", "")
#                     review_text = r.get("review_text", "")
#                     created_time = r.get("created_time", "")
#                     st.markdown(f"- **{reviewer}** | {rating_type} | {review_text} | {created_time}")


#             # ============================ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å (Main App) ============================

#             st.title("üìò Facebook Pages Overview")
      
#             st.write("Current working dir:", os.getcwd())
#             st.write("Python path:", sys.path)
#             st.write("FACEBOOK_PAGE_HEATER_ID:", FACEBOOK_PAGE_HEATER_ID)
#             st.write("FACEBOOK_PAGE_BBQ_ID:", FACEBOOK_PAGE_BBQ_ID)
#             for page_id in [FACEBOOK_PAGE_HEATER_ID, FACEBOOK_PAGE_BBQ_ID]:
#                 page_info = get_page_info(page_id)
#                 render_page_info(page_info, page_id)

#                 posts = get_page_posts(page_id, limit=3)
#                 render_page_posts(posts, num_posts=3)

#                 reviews = get_page_reviews(page_id, limit=5)
#                 render_page_reviews(reviews, num_reviews=5)

#         # --------------------- 7. LINE OA ---------------------
#         with tabs[6]:
#             st.header("üí¨ LINE OA ")
#             st.title("üìä LINE Messages Dashboard")

#             st.info("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏î‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•")

#             # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#             df_messages = fetch_line_messages()
#             st.write(f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å line messages {len(df_messages)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

#             # ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
#             with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."):
#                 df_analyzed = analyze_messages(df_messages)

#             # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á scrollable
            
#             st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
#             category_summary = summarize_categories(df_analyzed)
#             # ‡∏™‡∏£‡πâ‡∏≤‡∏á pie chart
#             fig_category = px.pie(
#                 category_summary,
#                 names="Category",
#                 values="Count",
#                 title="üìä ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° Category",
#                 color_discrete_sequence=px.colors.qualitative.Set2
#             )
#             st.plotly_chart(fig_category, use_container_width=True)

#             # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
#             confidence_summary = summarize_confidence(df_analyzed)
#             # ‡∏™‡∏£‡πâ‡∏≤‡∏á bar chart
#             fig_confidence = px.bar(
#                 confidence_summary,
#                 x="category",
#                 y="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
#                 color="category",
#                 text="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
#                 title="üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏° Category",
#                 color_discrete_sequence=px.colors.qualitative.Set3
#             )
#             fig_confidence.update_traces(textposition='outside')
#             fig_confidence.update_layout(yaxis=dict(range=[0,1]))
#             st.plotly_chart(fig_confidence, use_container_width=True)

#             # ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
#             st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß")
#             st.dataframe(
#                 df_analyzed[["message", "category", "confidence"]].sort_values(by="confidence", ascending=False),
#                 height=600
#             )
#pages/admin_dashboard.py
import os
import sys
import pandas as pd
import numpy as np
import streamlit as st
from utils.config import SHOPEE_SHOP_ID
import altair as alt
import plotly.express as px
import matplotlib.pyplot as plt
from utils.token_manager import get_gspread_client
# from api.fujikaservice_rest_api import fetch_all_products_fujikaservice
from datetime import datetime, timedelta
from database.all_database import get_all_reviews, get_reviews_by_period
from database.all_database import get_connection
# from api.fujikaservice_rest_api import *
# from api.facebook_graph_api import get_page_info, get_page_posts, get_page_reviews
from api.line_oa_processing import fetch_line_messages, analyze_messages, summarize_categories, summarize_confidence
from utils.config import FACEBOOK_PAGE_HEATER_ID, FACEBOOK_PAGE_BBQ_ID
from services.gsc_fujikathailand import *  # ‡∏î‡∏∂‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(page_title="Fujika Dashboard",page_icon="üåé", layout="wide")
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# from api.fujikathailand_rest_api import *
# from services.gsc_fujikathailand import *
from collections import defaultdict
# service_products = fetch_service_all_products()
# products = service_products 
# sales_data, buyers_list, total_orders = fetch_sales_and_buyers_all(order_status="completed")
import json

client = get_gspread_client()
sheet = client.open_by_key(os.environ["GOOGLE_SHEET_ID"] or st.secrets["GOOGLE_SHEET_ID"]).sheet1
def make_safe_for_streamlit(df):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å column object/list/dict ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ"""
    for col in df.columns:
        if df[col].dtype == "object":
            df[col] = df[col].apply(lambda x: json.dumps(x) if isinstance(x, (list, dict)) else str(x))
    return df


st.title("üìä Dashboard's ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°")

view = st.selectbox("üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", ["Highlights Overview","Data Sources" ])


if view == "Highlights Overview":
        
        st.title("Highlights Overview")



        st.markdown("""
        <style>
            .main {
                background-color: #f8f9fa;
                font-family: 'Segoe UI', sans-serif;
            }
            h1, h2, h3 {
                color: #1e3a8a;
            }
            .stMetric {
                background-color: #ffffff;
                border-radius: 12px;
                box-shadow: 0px 1px 3px rgba(0,0,0,0.1);
                padding: 10px;
            }
        </style>
        """, unsafe_allow_html=True)

        # üè∑Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
        st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        st.divider()

        # üîΩ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.container():
            col1, col2, col3 = st.columns([1,1,1])

            with col1:
                period_option = st.selectbox(
                    "üïí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                    ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ")
                )

            with col2:
                platform_option = st.selectbox(
                    "üåê ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
                    ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "fujikathailand", "FACEBOOK", "SHOPEE", "LAZADA" , "LINE")
                )

            with col3:
                show_chart = st.toggle("üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ", value=True)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        months = None
        if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            months = 1
        elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            months = 3
        elif period_option == "1 ‡∏õ‡∏µ":
            months = 12

        # üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß..."):
            if months:
                df = get_reviews_by_period(
                    platform=None if platform_option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else platform_option,
                    months=months
                )
            else:
                df = get_all_reviews(
                    platform=None if platform_option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else platform_option
                )

        # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if df is not None and not df.empty:
            total_reviews = len(df)
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_reviews:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

            # üß† ‡∏™‡∏£‡∏∏‡∏õ sentiment
            if "sentiment" in df.columns:
                col1, col2, col3 = st.columns(3)
                positive = len(df[df["sentiment"] == "positive"])
                negative = len(df[df["sentiment"] == "negative"])
                neutral = len(df[df["sentiment"] == "neutral"])

                col1.metric("üòä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å", f"{positive:,}")
                col2.metric("üòê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÜ", f"{neutral:,}")
                col3.metric("üò† ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö", f"{negative:,}")

            # üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ
            if show_chart and "review_date" in df.columns:
                df["review_date"] = pd.to_datetime(df["review_date"])

                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏° period_option
                if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                    df["period"] = df["review_date"].dt.date.astype(str)  # ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
                elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                    df["period"] = df["review_date"].dt.to_period("W").astype(str)  # ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
                elif period_option == "1 ‡∏õ‡∏µ":
                    df["period"] = df["review_date"].dt.to_period("M").astype(str)  # ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                else:  # "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
                    df["period"] = df["review_date"].dt.to_period("Y").astype(str)  # ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ

                trend_df = df.groupby("period").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                fig = px.line(
                    trend_df,
                    x="period", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    markers=True,
                    title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤",
                    color_discrete_sequence=["#1d4ed8"]
                )
                fig.update_layout(xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                st.plotly_chart(fig, use_container_width=True)

            # üßæ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏õ‡∏∏‡πà‡∏° Export
            display_df = df.rename(columns={
                "platform": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
                "shop_id": "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                "review_text": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                "sentiment": "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                "review_date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
            })       
            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
            display_df = display_df.copy()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SettingWithCopyWarning
            display_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(display_df) + 1))

            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
           # üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô string
            for col in ["platform", "shop_id", "review_text", "rating", "sentiment", "review_date"]:
                if col in df.columns:
                    df[col] = df[col].fillna("").astype(str)

            # üîπ toggle ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            show_table_time = st.toggle("üëÄ views", value=False , key= "show_table_time")
            if show_table_time:
                st.dataframe(
                    display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
                    use_container_width=True,
                    height=550
                )

            # üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
            csv_data = df[["platform", "shop_id", "review_text","rating",  "sentiment", "review_date"]].to_csv(
                index=False, encoding='utf-8-sig'
            )
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                data=csv_data,
                file_name=f"review_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        

        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        st.title("üìä Dashboard ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏•‡∏≤‡∏¢ Platform")

        #111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

        # üîΩ ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.container():
            col1, col2, col3 = st.columns([1,1,1])

            with col1:
                period_option = st.selectbox(
                    "üïí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                    ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ"),
                    key="period_selectbox"
                )

            with col2:
                platform_option = st.selectbox(
                    "üåê ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
                    ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "fujikathailand", "FACEBOOK", "SHOPEE", "LAZADA", "LINE"),
                    key="platform_selectbox"
                )

            with col3:
                show_chart_graph = st.toggle("üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ", value=True, key="show_chart_toggle")

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        months = None
        if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            months = 1
        elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            months = 3
        elif period_option == "1 ‡∏õ‡∏µ":
            months = 12

        # ‡πÅ‡∏õ‡∏•‡∏á platform "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏õ‡πá‡∏ô None
        platform = None if platform_option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else platform_option

        # ---- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database ----
        if months is None and platform is None:
            df = get_all_reviews()
        elif months is None:
            df = get_all_reviews(platform=platform)
        else:
            df = get_reviews_by_period(platform=platform, months=months)

        if df.empty:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
        else:

            if show_chart:
                df['review_date'] = pd.to_datetime(df['review_date'])

                fig = px.line(
                    df,
                    x='review_date',
                    y='rating',
                    color='platform',
                    labels={'review_date':'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà','rating':'Rating','platform':'Platform'},
                    title="üìà Rating  Platform",
                    markers=True,  # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô
                    hover_data=['review_text', 'shop_id', 'product_id']
                )

                fig.update_layout(
                    yaxis=dict(range=[0,5]),
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    legend_title_text='Platform'
                )

                st.plotly_chart(fig, use_container_width=True)


            # ---- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ----
            display_df = df.copy()
            display_df['review_date'] = pd.to_datetime(display_df['review_date'])
            display_df.sort_values(by='review_date', ascending=False, inplace=True)
            display_df.reset_index(drop=True, inplace=True)
            display_df['‡∏•‡∏≥‡∏î‡∏±‡∏ö'] = display_df.index + 1

            display_df.rename(columns={
                'platform':'‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°',
                'shop_id':'‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
                'product_id':'‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                'review_id':'‡∏£‡∏´‡∏±‡∏™‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                'rating':'‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
                'sentiment':'‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                'review_text':'‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                'keywords':'‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
                'review_date':'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'
            }, inplace=True)

            show_table_review = st.toggle("üëÄ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", value=False, key="toggle_table_review")
            if show_table_review:
                st.dataframe(
                    display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö","‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°","‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô","‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß","‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
                    width='stretch',
                    height=550
                )

            # ---- ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV ----
            csv_data = display_df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
                data=csv_data,
                file_name=f"reviews_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            


        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        df = get_all_reviews()

        if df.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        else:
            # ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            platform_counts = (
                df.groupby("platform")
                .size()
                .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", ascending=False)
            )

            # ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            platform_icons = {
                "Shopee": "üõí",
                "Lazada": "üì¶",
                "Facebook": "üìò",
                "fujikathailand.com": "üåê",
                "cpsmanu.com": "üè≠",
                "fujikaservice.com": "üîß"
            }

            # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            platform_colors = {
                "Shopee": "#FF6B00",          # ‡∏™‡πâ‡∏°
                "Facebook": "#1877F2",        # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ü‡πâ‡∏≤
                "Lazada": "#7F3CFF",          # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡πà‡∏ß‡∏á
                "fujikathailand.com": "#FFD700",  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á
                "cpsmanu.com": "#9ca3af",     # ‡πÄ‡∏ó‡∏≤
                "fujikaservice.com": "#34d399" # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ó‡πå
            }

            # üåà CSS ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏π‡∏Ç‡∏∂‡πâ‡∏ô
            st.markdown("""
            <style>
            .platform-container {
                display: flex;
                justify-content: flex-start;
                flex-wrap: nowrap;
                gap: 16px;
                overflow-x: auto;
                padding: 10px 5px 20px 5px;
            }
            .platform-card {
                min-width: 160px;
                height: 140px;
                border-radius: 16px;
                padding: 16px;
                text-align: center;
                color: white;
                font-family: "Segoe UI", sans-serif;
                box-shadow: 0 4px 10px rgba(0,0,0,0.15);
                transition: all 0.3s ease;
                flex-shrink: 0;
            }
            .platform-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            }
            .icon {
                font-size: 30px;
                margin-bottom: 6px;
            }
            .platform-name {
                font-weight: 600;
                font-size: 16px;
            }
            .review-count {
                font-size: 18px;
                font-weight: bold;
                margin-top: 6px;
            }
            .rank-label {
                font-size: 13px;
                opacity: 0.9;
                margin-top: 3px;
            }
            </style>
            """, unsafe_allow_html=True)

            st.markdown("## üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
            st.markdown('<div class="platform-container">', unsafe_allow_html=True)

            for idx, row in platform_counts.iterrows():
                platform = row["platform"]
                review_count = int(row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"])
                icon = platform_icons.get(platform, "üí¨")
                bg_color = platform_colors.get(platform, "#60a5fa")  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö

                st.markdown(f"""
                <div class="platform-card" style="background:{bg_color};">
                    <div class="icon">{icon}</div>
                    <div class="platform-name">{platform}</div>
                    <div class="review-count">{review_count:,} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>
                    <div class="rank-label">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {idx+1}</div>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("</div>", unsafe_allow_html=True)






        




elif view == "Data Sources":




        st.markdown("""
            <style>
                /* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å */
                div[data-baseweb="tab-list"] {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: center;
                    gap: 8px;
                    background-color: #e3f2fd !important;  /* üíô ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
                    border-radius: 15px;
                    padding: 10px;
                }

                /* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
                button[data-baseweb="tab"] {
                    background-color: #ffffff;
                    border-radius: 10px;
                    padding: 10px 20px;
                    font-size: 0.9rem;
                    font-weight: 500;
                    color: #444;
                    border: 1px solid #ccc;
                    transition: all 0.25s ease-in-out;
                    flex: 1 1 auto;
                    min-width: 130px;
                    text-align: center;
                }

                /* Hover */
                button[data-baseweb="tab"]:hover {
                    background-color: #f1f9ff;
                    color: #007bff;
                    transform: scale(1.05);
                }

                /* Active Tab: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö */
                /* 1 = Fujikathailand */
                div[data-baseweb="tab-list"] > button:nth-child(1)[aria-selected="true"] {
                    background: linear-gradient(135deg, #007bff, #00bcd4);
                    color: white;
                    font-weight: 600;
                }

                /* 2 = CPSManu */
                div[data-baseweb="tab-list"] > button:nth-child(2)[aria-selected="true"] {
                    background: linear-gradient(135deg, #5c6bc0, #7986cb);
                    color: white;
                    font-weight: 600;
                }

                /* 3 = FujikaService */
                div[data-baseweb="tab-list"] > button:nth-child(3)[aria-selected="true"] {
                    background: linear-gradient(135deg, #009688, #4db6ac);
                    color: white;
                    font-weight: 600;
                }

                /* 4 = Shopee */
                div[data-baseweb="tab-list"] > button:nth-child(4)[aria-selected="true"] {
                    background: linear-gradient(135deg, #ff7043, #ff5722);
                    color: white;
                    font-weight: 600;
                }

                /* 5 = Lazada */
                div[data-baseweb="tab-list"] > button:nth-child(5)[aria-selected="true"] {
                    background: linear-gradient(135deg, #1a73e8, #8e24aa);
                    color: white;
                    font-weight: 600;
                }

                /* 6 = Facebook */
                div[data-baseweb="tab-list"] > button:nth-child(6)[aria-selected="true"] {
                    background: linear-gradient(135deg, #1877f2, #3b5998);
                    color: white;
                    font-weight: 600;
                }

                /* 7 = LINE OA */
                div[data-baseweb="tab-list"] > button:nth-child(7)[aria-selected="true"] {
                    background: linear-gradient(135deg, #00b900, #00e676);
                    color: white;
                    font-weight: 600;
                }

                /* Responsive */
                @media (max-width: 768px) {
                    button[data-baseweb="tab"] {
                        font-size: 0.8rem;
                        padding: 8px 12px;
                        min-width: 100px;
                    }
                }

                @media (max-width: 480px) {
                    button[data-baseweb="tab"] {
                        font-size: 0.75rem;
                        padding: 6px 10px;
                        min-width: 85px;
                    }
                }
            </style>
        """, unsafe_allow_html=True)

        tabs = st.tabs([
            "üì∞ Fujikathailand.com",
            "üè≠ CPSManu.com",
            "üõ†Ô∏è FujikaService.com",
            "üõçÔ∏è Shopee",
            "üõí Lazada",
            "üìò Facebook",
            "üí¨ LINE OA"
        ])



        # --------------------- 1. Fujikathailand ---------------------
        with tabs[0]:
            st.header("üì∞ Website Fujikathailand.com")
            st.set_page_config(page_title="Fujikathailand Reviews", layout="wide")
            # ---- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ----
            st.markdown("""
            <style>
            /* ‡∏Å‡∏•‡πà‡∏≠‡∏á select ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
            div[data-baseweb="select"] {
                background-color: #e0f2fe !important;
                border-radius: 6px !important;
                color: #1e3a8a !important;
            }

            /* ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
            div[data-baseweb="select"] div[data-baseweb="value-container"] {
                color: #1e3a8a !important;
                font-weight: 600 !important;
                font-size: 15px !important;
                padding: 6px 10px !important;
                line-height: 1.6 !important;
                overflow: visible !important;
                white-space: normal !important;  /* ‡πÉ‡∏´‡πâ text ‡∏û‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß */
            }

            /* ‡∏ï‡∏±‡∏ß dropdown ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î */
            div[data-baseweb="menu"] {
                background-color: #f0f9ff !important;
                color: #1e3a8a !important;
                border-radius: 8px !important;
            }

            /* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */
            div[data-baseweb="option"] {
                color: #1e3a8a !important;
                font-size: 14px !important;
                padding: 8px 12px !important;
            }

            /* Hover */
            div[data-baseweb="option"]:hover {
                background-color: #bfdbfe !important;
                color: #1e3a8a !important;
            }
            </style>
            """, unsafe_allow_html=True )
            period_option = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ"],
                index=0
            )

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            period_mapping = {
                "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": None,
                "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 1,
                "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 3,
                "1 ‡∏õ‡∏µ": 12
            }
            months = period_mapping[period_option]


            # ---- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ----
            @st.cache_data
            def get_fujikathailand_reviews_by_period(months=None):
                if months is None:
                    # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    df = get_all_reviews(platform="fujikathailand")
                else:
                    # ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    df = get_reviews_by_period(platform="fujikathailand", months=months)
                return df


            df = get_fujikathailand_reviews_by_period(months=months)

            if df.empty:
                st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
            else:
                # ---- ‡∏Å‡∏£‡∏≤‡∏ü Rating ----
                st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ Rating")
                rating_counts = df['rating'].value_counts().sort_index()
                fig = px.bar(
                    x=rating_counts.index.astype(str),
                    y=rating_counts.values,
                    labels={'x': 'Rating', 'y': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'},
                    text=rating_counts.values,
                    color=rating_counts.index.astype(str),
                    color_discrete_sequence=px.colors.qualitative.Bold
                )
                fig.update_traces(textposition='outside')
                fig.update_layout(
                    xaxis=dict(title='Rating'),
                    yaxis=dict(title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'),
                    showlegend=False,
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)'
                )
                st.plotly_chart(fig, use_container_width=True)

                # ---- ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Rating ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ----
                # ---- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö interactive ----
                display_df = df.copy()
                display_df['review_date'] = pd.to_datetime(display_df['review_date'])
                display_df = display_df.sort_values(by='review_date', ascending=False)

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏•‡∏≥‡∏î‡∏±‡∏ö' ‡∏à‡∏≤‡∏Å index
                display_df.reset_index(drop=True, inplace=True)
                display_df['‡∏•‡∏≥‡∏î‡∏±‡∏ö'] = display_df.index + 1

                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                display_df.rename(columns={
                    'platform': '‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°',
                    'shop_id': '‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
                    'product_id': '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                    'review_id': '‡∏£‡∏´‡∏±‡∏™‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                    'rating': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
                    'sentiment': '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                    'review_text': '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
                    'keywords': '‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
                    'review_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'
                }, inplace=True)

                # ‡πÉ‡∏ä‡πâ toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                show_table_02 = st.toggle("üëÄ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", value=False)
                if show_table_02:
                    st.dataframe(
                        display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
                        use_container_width=True,
                        height=550
                    )

                # ---- ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV ----
                csv_data_export = display_df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                    data=csv_data_export,
                    file_name=f"fujikathailand_reviews_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )

            
        # --------------------- 2. CPSManu ---------------------
        with tabs[1]:
            st.header("üè≠ WordPress Posts: cpsmanu.com")
            st.write("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ""https://www.cpsmanu.com/")
            st.title("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")


            images = [
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-sh_gr.jpg", "link": "https://www.cpsmanu.com/water-heater/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-pu_gr.jpg", "link": "https://www.cpsmanu.com/home-water-pump/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-wa_gr.jpg", "link": "https://www.cpsmanu.com/water-purifier/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-st_gr-.jpg", "link": "https://www.cpsmanu.com/electric-stove/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-oem_gr.jpg", "link": "https://www.cpsmanu.com/oem-odm-services/"},
            ]

            cols = st.columns(len(images))

            for col, img in zip(cols, images):
                with col:
                    st.markdown(f'<a href="{img["link"]}" target="_blank"><img src="{img["url"]}" width="120" style="border-radius: 8px;"></a>', unsafe_allow_html=True)



        # --------------------- 3. FujikaService ---------------------
        
        with tabs[2]:
            
            # ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheet =====
            SHEET_NAME = "Contact Information (Responses)"  # ‡∏à‡∏≤‡∏Å Google Sheet ‡∏ä‡∏∑‡πà‡∏≠ "Contact Information (Responses)"
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            client = get_gspread_client()
            sheet = client.open(SHEET_NAME).sheet1
            rows = sheet.get_all_values()

            # ===== ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame =====
            df = pd.DataFrame(rows[1:], columns=rows[0])

            # ===== ‡∏•‡∏ö column ‡∏ã‡πâ‡∏≥ =====
            df = df.loc[:, ~df.columns.duplicated()]

            # ===== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A‚Äìs (0‚Äì19) =====
            df_selected = df.iloc[:, :19]

            # ===== ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡πà‡∏≤ Model =====
            df_selected['Model'] = df_selected['Model'].str.strip()

            # ===== ‡∏ô‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
            model_series = df_selected['Model']
            model_counts = model_series.value_counts()
            top_models = model_counts.head(3)

            # ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Dashboard =====
            st.set_page_config(page_title="üìä Dashboard ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°", layout="wide")

            st.title("üìä Dashboard ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢")
            # st.markdown(
            #     """
            #     <style>
            #     .stApp {
            #           /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
            #     }
            #     </style>
            #     """,
            #     unsafe_allow_html=True
            # )
            st.markdown("""
            <div style="
                background-color: #f0f2f6;
            ">
            """, unsafe_allow_html=True)

            # ===== ‡∏ï‡∏±‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Model =====
            st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model")

            st.markdown(
                """
                <style>
                textarea {
                    background-color: #ffffff !important;  /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
                    color: #000000 !important;             /* ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏î‡∏≥ */
                    border: 2px solid #cccccc !important;  /* ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
                    border-radius: 10px !important;
                    padding: 0px !important;

                }
                </style>
                """,
                unsafe_allow_html=True
            )

            search_model = st.text_area("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Model" , height=10)


            if search_model:
                search_model_clean = search_model.strip()

                if search_model_clean in df_selected['Model'].values:
                    rank = model_counts.index.get_loc(search_model_clean) + 1
                    count = model_counts[search_model_clean]

                    st.success(f"Model {search_model_clean} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {rank} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {count})")

                    with st.expander(f"üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Model {search_model_clean}"):
                        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Model
                        model_data = df_selected[df_selected['Model'] == search_model_clean]

                        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å column ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        columns_to_show = ['Timestamp', 'Address - ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', 
                                        '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°', '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô']
                        columns_exist = [col for col in columns_to_show if col in model_data.columns]
                        model_data_filtered = model_data[columns_exist]

                        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ column ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
                        new_names = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°", "‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô"]
                        model_data_filtered.columns = new_names[:len(columns_exist)]

                        # ‡πÅ‡∏™‡∏î‡∏á DataFrame
                        st.dataframe(model_data_filtered)

                else:
                    st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {search_model_clean} ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

            # ===== ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model =====
            st.subheader("3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Model ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
            st.bar_chart(top_models)

            st.markdown("---")

            if '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' in df_selected.columns:
                st.subheader("üìä ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")

                # ====== 1. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ======
                channel_counts = df_selected['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'].value_counts().reset_index()
                channel_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

                # ====== 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ======
                total_orders = channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].sum()
                channel_counts['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå'] = (channel_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'] / total_orders * 100).round(2)

                # ====== 3. ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ======
                max_channel = channel_counts.iloc[0]
                min_channel = channel_counts.iloc[-1]

                # ====== 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á ======
                bars = alt.Chart(channel_counts).mark_bar(size=25).encode(
                    x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
                    y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
                    color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N',
                    tooltip=['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']
                )

                # ====== 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á ======
                text = alt.Chart(channel_counts).mark_text(
                    align='left',
                    baseline='middle',
                    dx=3  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á
                ).encode(
                    x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q',
                    y=alt.Y('‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:N', sort='-x'),
                    text=alt.Text('‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:Q', format='.2f')
                )

                # ====== 6. ‡∏£‡∏ß‡∏°‡πÅ‡∏ó‡πà‡∏á + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ======
                chart = (bars + text).properties(height=300)

                st.altair_chart(chart, use_container_width=True)

                # ====== 7. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å/‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î ======
                st.markdown(f"""
                <div style="
                    padding: 8px 12px; 
                    background-color:#d4edda; 
                    color:#155724; 
                    border-radius:5px; 
                    width: fit-content;
                    display:inline-block;
                    margin-bottom:5px;
                    font-size:14px;
                ">
                üìà ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{max_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({max_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {max_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
                </div>
                """, unsafe_allow_html=True)

                st.markdown(f"""
                <div style="
                    padding: 8px 12px; 
                    background-color:#fff3cd; 
                    color:#856404; 
                    border-radius:5px; 
                    width: fit-content;
                    display:inline-block;
                    font-size:14px;
                ">
                üìâ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î <b>{min_channel['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á']}</b> ({min_channel['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, {min_channel['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå']}%)
                </div>
                """, unsafe_allow_html=True)


            st.markdown("----")
            st.markdown("---")
            if '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô' in df_selected.columns:
                st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô")

                know_counts = df_selected['‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô'].value_counts().reset_index()
                know_counts.columns = ['‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

                fig = px.pie(
                    know_counts,
                    names='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
                    values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                    color='‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á',
                    color_discrete_sequence=px.colors.qualitative.Set3,
                    hole=0.4  # ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô donut chart
                )
                st.plotly_chart(fig, use_container_width=True)



            st.subheader("üìÑ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
            df_feedback = df_selected[
                df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].notna() & 
                (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "") &
                (df_selected['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°'].str.strip() != "-")
            ].copy()  # copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ warning

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
            df_feedback.insert(0, '‡∏•‡∏≥‡∏î‡∏±‡∏ö', range(1, len(df_feedback)+1))

            # ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏û‡∏£‡πâ‡∏≠‡∏° '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'
            columns_to_show = ['‡∏•‡∏≥‡∏î‡∏±‡∏ö', 'Model', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ‡∏ï‡∏¥‡∏ä‡∏°']
            st.dataframe(df_feedback[columns_to_show])

            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ï‡πà‡∏≠ Model
            feedback_counts = df_feedback.groupby('Model').size().reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞')
            total_feedback = len(df_feedback)
            st.markdown(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_feedback} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.markdown("</div>", unsafe_allow_html=True)

           
        with tabs[3]:
            st.markdown("""
            <style>
                .main {
                    background-color: #f8f9fa;
                    font-family: 'Segoe UI', sans-serif;
                }
                h1, h2, h3 {
                    color: #1e3a8a;
                }
                .stMetric {
                    background-color: #ffffff;
                    border-radius: 12px;
                    box-shadow: 0px 1px 3px rgba(0,0,0,0.1);
                    padding: 10px;
                }
            </style>
            """, unsafe_allow_html=True)
            st.header("üõçÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee")
            period_option = st.selectbox(
                "üïí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ")
            )

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            months = None
            if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                months = 1
            elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                months = 3
            elif period_option == "1 ‡∏õ‡∏µ":
                months = 12

            # üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Shopee ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee..."):
                if months:
                    df = get_reviews_by_period(platform="shopee", months=months)
                else:
                    df = get_all_reviews(platform="shopee")

            # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Dashboard ‡∏õ‡∏Å‡∏ï‡∏¥
            if df is not None and not df.empty:
                total_reviews = len(df)
                st.success(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_reviews:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                # ‡∏™‡∏£‡∏∏‡∏õ sentiment
                if "sentiment" in df.columns:
                    col1, col2, col3 = st.columns(3)
                    positive = len(df[df["sentiment"] == "positive"])
                    negative = len(df[df["sentiment"] == "negative"])
                    neutral = len(df[df["sentiment"] == "neutral"])

                    col1.metric("üòä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å", f"{positive:,}")
                    col2.metric("üòê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÜ", f"{neutral:,}")
                    col3.metric("üò† ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö", f"{negative:,}")

                # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
                if "review_date" in df.columns:
                    df["review_date"] = pd.to_datetime(df["review_date"])
                    if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                        df["period"] = df["review_date"].dt.date.astype(str)
                    elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                        df["period"] = df["review_date"].dt.to_period("W").astype(str)
                    elif period_option == "1 ‡∏õ‡∏µ":
                        df["period"] = df["review_date"].dt.to_period("M").astype(str)
                    else:
                        df["period"] = df["review_date"].dt.to_period("Y").astype(str)

                    trend_df = df.groupby("period").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                    fig = px.line(
                        trend_df,
                        x="period", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                        markers=True,
                        title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee",
                        color_discrete_sequence=["#1d4ed8"]
                    )
                    fig.update_layout(xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                    st.plotly_chart(fig, use_container_width=True)

                # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß + ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                display_df = df.rename(columns={
                    "platform": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
                    "shop_id": "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "review_text": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    "sentiment": "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    "review_date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
                })
                display_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(display_df) + 1))

                show_table = st.toggle("üëÄ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", value=False, key="toggle_shopee_01")
                if show_table:
                    st.dataframe(
                        display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
                        use_container_width=True,
                        height=550
                    )

                csv_data = df[["platform", "shop_id", "review_text","rating","sentiment","review_date"]].to_csv(
                    index=False, encoding='utf-8-sig'
                )
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
                    data=csv_data,
                    file_name=f"shopee_review_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")


                
        # --------------------- 5. Lazada ---------------------
        with tabs[4]:
            st.header("üì¶ Lazada reviews")

            with st.container():
                col1, col2 = st.columns([1,1])

                with col1:
                    period_option = st.selectbox(
                        "üïí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                        ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "1 ‡∏õ‡∏µ"),
                        key="select_period_lazada"
                    )

                with col2:
                    show_chart = st.toggle("üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ", value=True, key="toggle_show_chart_lazada")

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            months = None
            if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                months = 1
            elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                months = 3
            elif period_option == "1 ‡∏õ‡∏µ":
                months = 12

            # üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Lazada
            with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada..."):
                if months:
                    df = get_reviews_by_period(platform="LAZADA", months=months)
                else:
                    df = get_all_reviews(platform="LAZADA")

            # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if df is not None and not df.empty:
                total_reviews = len(df)
                st.success(f"‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_reviews:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                # üß† ‡∏™‡∏£‡∏∏‡∏õ sentiment
                if "sentiment" in df.columns:
                    col1, col2, col3 = st.columns(3)
                    positive = len(df[df["sentiment"] == "positive"])
                    negative = len(df[df["sentiment"] == "negative"])
                    neutral = len(df[df["sentiment"] == "neutral"])

                    col1.metric("üòä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å", f"{positive:,}")
                    col2.metric("üòê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÜ", f"{neutral:,}")
                    col3.metric("üò† ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö", f"{negative:,}")

                # üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
                if show_chart and "review_date" in df.columns:
                    df["review_date"] = pd.to_datetime(df["review_date"])
                    if period_option == "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                        df["period"] = df["review_date"].dt.date.astype(str)
                    elif period_option == "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
                        df["period"] = df["review_date"].dt.to_period("W").astype(str)
                    elif period_option == "1 ‡∏õ‡∏µ":
                        df["period"] = df["review_date"].dt.to_period("M").astype(str)
                    else:
                        df["period"] = df["review_date"].dt.to_period("Y").astype(str)

                    trend_df = df.groupby("period").size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                    fig = px.line(
                        trend_df,
                        x="period", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                        markers=True,
                        title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤",
                        color_discrete_sequence=["#1d4ed8"]
                    )
                    fig.update_layout(xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")
                    st.plotly_chart(fig, use_container_width=True)

                # üßæ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                display_df = df.rename(columns={
                    "platform": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
                    "shop_id": "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "review_text": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    "sentiment": "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    "review_date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
                })
                display_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(display_df) + 1))

                show_table = st.toggle("üëÄ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada", value=False, key="toggle_show_table_lazada")
                if show_table:
                    st.dataframe(
                        display_df[["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°", "‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"]],
                        use_container_width=True,
                        height=550
                    )

                # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                csv_data = df[["platform", "shop_id", "review_text", "rating", "sentiment", "review_date"]].to_csv(
                    index=False, encoding='utf-8-sig'
                )
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                    data=csv_data,
                    file_name=f"lazada_review_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )

            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

        # --------------------- 6. Facebook Page / Ads ---------------------
        with tabs[5]:
            import time
            st.title("Facebook Page ")
            st.header("review ‡πÄ‡∏ï‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ü‡∏π‡∏à‡∏¥‡∏Å‡πâ‡∏≤")
            with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                time.sleep(10)  # ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

            st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")



        # --------------------- 7. LINE OA ---------------------
        with tabs[6]:
            st.header("üí¨ LINE OA ")

            st.info("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏î‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            df_messages = fetch_line_messages()
            st.write(f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å line messages {len(df_messages)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

            # ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."):
                df_analyzed = analyze_messages(df_messages)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á scrollable
            
            # st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            category_summary = summarize_categories(df_analyzed)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á pie chart
            fig_category = px.pie(
                category_summary,
                names="Category",
                values="Count",
                title="üìä ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° Category",
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            st.plotly_chart(fig_category, use_container_width=True)

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
            confidence_summary = summarize_confidence(df_analyzed)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á bar chart
            fig_confidence = px.bar(
                confidence_summary,
                x="category",
                y="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                color="category",
                text="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
                title="üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏° Category",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig_confidence.update_traces(textposition='outside')
            fig_confidence.update_layout(yaxis=dict(range=[0,1]))
            st.plotly_chart(fig_confidence, use_container_width=True)

            # ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß")
            st.dataframe(
                df_analyzed[["message", "category", "confidence"]].sort_values(by="confidence", ascending=False),
                height=600
            )