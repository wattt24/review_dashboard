import requests
import time
import hashlib
import hmac
import urllib.parse
import json
import sys
import os
import datetime
os.environ["GOOGLE_SHEET_ID"] = "113NflRY6A8qDm5KmZ90bZSbQGWaNtFaDVK3qOPU8uqE"
from utils.token_manager import get_latest_token, save_token
# from utils.config import LAZADA_APP_ID, LAZADA_APP_SECRET
import requests
# ****************************‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
from lazop.base import LazopClient, LazopRequest
import json
# ====== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î) ======
# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö
LAZADA_APP_ID = "135259"
LAZADA_APP_SECRET = "MXZ9vzVVw3TsGbal73a3PljVprysSRrN" 
LAZADA_ACCOUNT_ID = "pirattapong.v@gmail.com"
import json
import requests
import time
import hashlib
import hmac
import urllib.parse
import datetime
from lazop.base import LazopClient, LazopRequest
# # ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á sdk ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API
# def call_lazada_api(endpoint, method="GET", params=None):
#     """
#     ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡∏ú‡πà‡∏≤‡∏ô SDK
#     """
#     try:
#         client = LazopClient("https://api.lazada.co.th/rest", LAZADA_APP_ID, LAZADA_APP_SECRET)
#         request = LazopRequest(endpoint, method)

#         if params:
#             for k, v in params.items():
#                 request.add_api_param(k, str(v))

#         response = client.execute(request, LAZADA_ACCESS_TOKEN)

#         # ‚úÖ ‡∏ö‡∏≤‡∏á SDK ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô dict, ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏ô string
#         if isinstance(response.body, (str, bytes)):
#             data = json.loads(response.body)
#         else:
#             data = response.body

#         return data

#     except Exception as e:
#         print(f"‚ùå Error calling Lazada API: {str(e)}")
#         return {"error": str(e)}

def call_lazada_api(endpoint, method="GET", params=None, account_id=LAZADA_ACCOUNT_ID):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡∏ú‡πà‡∏≤‡∏ô SDK
    ‡∏î‡∏∂‡∏á access_token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Google Sheet
    """
    try:
        # ‡∏î‡∏∂‡∏á token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Google Sheet
        token_data = get_latest_token("lazada", account_id)
        if not token_data or not token_data.get("access_token"):
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Lazada access_token ‡πÉ‡∏ô Google Sheet")

        access_token = token_data["access_token"]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á client Lazop
        client = LazopClient("https://api.lazada.co.th/rest", LAZADA_APP_ID, LAZADA_APP_SECRET)
        request = LazopRequest(endpoint, method)

        if params:
            for k, v in params.items():
                request.add_api_param(k, str(v))

        response = client.execute(request, access_token)

        # ‡∏ö‡∏≤‡∏á SDK ‡∏Ñ‡∏∑‡∏ô dict, ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏ô string
        if isinstance(response.body, (str, bytes)):
            data = json.loads(response.body)
        else:
            data = response.body

        return data

    except Exception as e:
        print(f"‚ùå Error calling Lazada API: {str(e)}")
        return {"error": str(e)}
    
def lazada_get_seller_info():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô (Seller Info) ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ
    ‡πÄ‡∏ä‡πà‡∏ô seller_id, name, email, country, shop_name ‡∏Ø‡∏•‡∏Ø
    """
    response = call_lazada_api(
        endpoint="/seller/get",
        method="GET"
    )

    if not response or response.get("code") != "0":
        print("‚ùå Error fetching seller info:", response)
        return None

    data = response.get("data", {})
    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô:", json.dumps(data, indent=2, ensure_ascii=False))
    return data

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ======

def lazada_get_products(offset=0, limit=10):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
    """
    return call_lazada_api(
        endpoint="/products/get",
        method="GET",
        params={
            "offset": offset,
            "limit": limit
        }
    )  #‡∏¢‡πâ‡∏≤‡∏¢‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß

def lazada_check_get_all_active_item_ids(limit=50):
    all_item_ids = []
    offset = 0

    while True:
        response = call_lazada_api(
            endpoint="/products/get",
            method="GET",
            params={
                "offset": offset,
                "limit": limit
            }
        )

        # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        if not response or response.get("code") != "0":
            print("‚ùå Error:", response)
            break

        products = response["data"].get("products", [])
        if not products:
            break  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß

        # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà Active
        active_items = [
            p["item_id"] for p in products
            if p.get("status") == "Active"
        ]
        all_item_ids.extend(active_items)

        print(f"üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Active {len(active_items)} ‡∏ä‡∏¥‡πâ‡∏ô) | offset={offset}")

        # ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ < limit ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        if len(products) < limit:
            break

        offset += limit  # ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    print("\n‚úÖ ‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà Active ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(all_item_ids))
    print("üÜî item_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", all_item_ids)
    return all_item_ids




def get_review_id_list(item_id, days_back=7, page=1):
    end_time = int(time.time() * 1000)
    start_time = end_time - (days_back * 24 * 60 * 60 * 1000)

    response = call_lazada_api(
        endpoint="/review/seller/history/list",
        method="GET",
        params={
            "item_id": item_id,
            "start_time": start_time,
            "end_time": end_time,
            "current": page
        }
    )

    print(f"üÜî Request ID: {response.get('request_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}")

    if not response or response.get("code") != "0" or not response.get("success"):
        print("‚ùå Error fetching review ID list:", response)
        return [], response

    data = response.get("data", {})
    review_ids = data.get("id_list", [])  # ‚úÖ Lazada ‡πÉ‡∏ä‡πâ id_list

    if not review_ids:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Review ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
    else:
        print(f"‚úÖ ‡∏û‡∏ö Review ID {len(review_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:", review_ids)

    return review_ids, response
def get_review_details_by_ids(review_id_list):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Lazada API (/review/seller/list/v2)
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ review_id_list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å /review/seller/history/list
    """
    if not review_id_list:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Review ID ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        return []

    print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(review_id_list)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)...")

    response = call_lazada_api(
        endpoint="/review/seller/list/v2",
        method="GET",
        params={
            "id_list": review_id_list   # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô list
        }
    )

    print(f"üÜî Request ID: {response.get('request_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}")

    if not response or response.get("code") != "0" or not response.get("success"):
        print("‚ùå Error fetching review details:", response)
        return []

    data = response.get("data", {})
    reviews = data.get("review_list", [])

    if not reviews:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô response")
        return []

    print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(reviews)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    return reviews

def get_all_reviews_for_item_list(item_id_list, days_back=7):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (item_id_list)
    """
    all_reviews = []

    for item_id in item_id_list:
        print(f"\nüõí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á item_id={item_id} ...")
        current_page = 1

        while True:
            # 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á Review ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            review_ids, response = get_review_id_list(item_id, days_back=days_back, page=current_page)
            if not review_ids:
                break

            # 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å ID
            reviews = get_review_details_by_ids(review_ids)
            all_reviews.extend(reviews)

            # 3Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏´‡∏° (has_next)
            data = response.get("data", {})
            if not data.get("has_next", False):
                break

            current_page += 1

        print(f"üéØ ‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö item_id={item_id}: {len([r for r in all_reviews if r.get('product_id') == item_id])}")

    print(f"\n‚úÖ ‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_reviews)}")
    return all_reviews


# ==============================
# üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô


# ===== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô =====
if __name__ == "__main__":
    seller_info = lazada_get_seller_info()

    if seller_info:
        print("\nüéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô:")
        print("üÜî Seller ID:", seller_info.get("seller_id"))
        print("üè™ ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô:", seller_info.get("shop_name"))
        print("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:", seller_info.get("email"))
        
    # products_response = lazada_get_products(offset=0, limit=10)
    # print(json.dumps(products_response, indent=2, ensure_ascii=False))
    # active_item_ids = lazada_check_get_all_active_item_ids(limit=50)

    # # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    # print("Active item IDs:")
    # for item_id in active_item_ids:
    #     print(item_id)

    # review_ids, response = get_review_id_list(
    #     item_id=522482835,
    #     days_back=7
    # )

    # print("\nüéØ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Review ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
    # print(json.dumps(response, indent=2, ensure_ascii=False))  # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
    # print(json.dumps(review_ids, indent=2, ensure_ascii=False))

    # review_details = get_review_details_by_ids(review_ids)

    # print("\nüéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    # print(json.dumps(review_details, indent=2, ensure_ascii=False))

    # item_list = lazada_check_get_all_active_item_ids(limit=50)
    # all_reviews = get_all_reviews_for_item_list(item_list, days_back=7)  

    # print("\nüéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    # for r in all_reviews:
    #     print(json.dumps(r, indent=2, ensure_ascii=False))



