import requests
import time
import hashlib
import hmac
import urllib.parse
import json
import sys
import os
import datetime
from datetime import datetime
os.environ["GOOGLE_SHEET_ID"] = "113NflRY6A8qDm5KmZ90bZSbQGWaNtFaDVK3qOPU8uqE"
import time
from utils.token_manager import get_latest_token, save_token
# from utils.config import LAZADA_APP_ID, LAZADA_APP_SECRET
import requests
# ****************************‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
from lazop.base import LazopClient, LazopRequest
import json
# ====== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î) ======
# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö
LALA=100200610
LAZADA_APP_ID = "135259"
LAZADA_APP_SECRET = "MXZ9vzVVw3TsGbal73a3PljVprysSRrN" 
# LAZADA_ACCESS_TOKEN = "50000300c32t6FEoxrr98dk0ejxhvvjcjCSesUzFflPL153b42e63GwXGwiEvSgU"
import time, json
from datetime import datetime
from database.all_database import save_reviews_to_db, get_connection 
import json
import requests
import time
import hashlib
import hmac
import urllib.parse
from datetime import datetime, timedelta, timezone


import time
from lazop.base import LazopClient, LazopRequest
# # ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á sdk ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API

# 
def call_lazada_api(endpoint, method="GET", params=None, access_token=None):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡∏ú‡πà‡∏≤‡∏ô SDK
    ‡∏ñ‡πâ‡∏≤ access_token ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Google Sheet
    """
    try:
        if not access_token:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Google Sheet
            token_data = get_latest_token("lazada", LALA)  # ‡∏´‡∏£‡∏∑‡∏≠ account_id ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            if not token_data or not token_data.get("access_token"):
                raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Lazada access_token ‡πÉ‡∏ô Google Sheet")
            access_token = token_data["access_token"]

        client = LazopClient("https://api.lazada.co.th/rest", LAZADA_APP_ID, LAZADA_APP_SECRET)
        request = LazopRequest(endpoint, method)

        if params:
            for k, v in params.items():
                request.add_api_param(k, str(v))

        response = client.execute(request, access_token)

        if isinstance(response.body, (str, bytes)):
            data = json.loads(response.body)
        else:
            data = response.body

        return data

    except Exception as e:
        print(f"‚ùå Error calling Lazada API: {str(e)}")
        return {"error": str(e)}

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ======

def lazada_get_products(offset=0, limit=10):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
    """
    return call_lazada_api(
        endpoint="/products/get",
        method="GET",
        params={
            "offset": offset,
            "limit": limit
        }
    )  #‡∏¢‡πâ‡∏≤‡∏¢‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß
def lazada_get_active_item_ids(limit=50, filter_status="live"):
    """‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏≤ item_id ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà Active (live status)"""
    all_item_ids = []
    offset = 0

    while True:
        response = call_lazada_api(
            endpoint="/products/get",
            method="GET",
            params={
                "offset": offset,
                "limit": limit,
                "filter": filter_status  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            }
        )

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limit
        if response.get("code") == "ApiCallLimit":
            print(f"‚ö†Ô∏è Rate limit ‡πÄ‡∏à‡∏≠! ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‚Ä¶")
            time.sleep(2)
            continue  # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô
        if not response or response.get("code") != "0":
            print("‚ùå Error:", response)
            break

        products = response["data"].get("products", [])
        if not products:
            break

        # ‡∏î‡∏∂‡∏á item_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        item_ids = [p["item_id"] for p in products]
        all_item_ids.extend(item_ids)

        print(f"üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ | offset={offset}")

        if len(products) < limit:
            break

        offset += limit
        time.sleep(1) # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
    print("\n‚úÖ ‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà Active ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(all_item_ids))
    print("üÜî item_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", all_item_ids)
    return all_item_ids


def get_review_id_list(item_id, days_back=7, offset_days=0, page=1, access_token=None, max_retries=5):
    """‡∏î‡∏∂‡∏á review ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Lazada ‡∏û‡∏£‡πâ‡∏≠‡∏° handle rate limit"""
    end_time = int(time.time() * 1000) - (offset_days * 24 * 60 * 60 * 1000)  # ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    start_time = end_time - (days_back * 24 * 60 * 60 * 1000)
    retry_count = 0
    wait_time = 2  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠ rate limit)

    while retry_count < max_retries:
        response = call_lazada_api(
            endpoint="/review/seller/history/list",
            method="GET",
            params={
                "item_id": item_id,
                "start_time": start_time,
                "end_time": end_time,
                "current": page
            },
            access_token=access_token
        )

        print(f"üÜî Request ID: {response.get('request_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏à‡∏≠ rate limit ‚Üí ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        if response and response.get("code") == "ApiCallLimit":
            print(f"‚ö†Ô∏è Rate limit ‡πÄ‡∏à‡∏≠! ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
            time.sleep(wait_time)
            retry_count += 1
            wait_time *= 2  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 2x (2‚Üí4‚Üí8‚Üí16...)
            continue

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à error ‡∏≠‡∏∑‡πà‡∏ô
        if not response or response.get("code") != "0" or not response.get("success"):
            print("‚ùå Error fetching review ID list:", response)
            return [], response
        time.sleep(0.2)
        # ‚úÖ ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏õ‡∏Å‡∏ï‡∏¥
        data = response.get("data", {})
        review_ids = data.get("id_list", [])
        time.sleep(8)
        if review_ids:
            print("üÜî item_id ‡∏Ñ‡∏∑‡∏≠", item_id)
            print(f"‚úÖ ‡∏û‡∏ö Review ID {len(review_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:", review_ids)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Review ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")

        return review_ids, response

    # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÄ‡∏à‡∏≠ rate limit
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ({max_retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á) ‡∏Ç‡πâ‡∏≤‡∏° item_id {item_id}")
    return [], {"error": "ApiCallLimit after max retries"}



def get_all_review_ids_by_item_id(item_id, days_back=7, offset_days=0, access_token=None):
    """ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ get_review_id_list ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á item_id """
    all_review_ids = []
    page = 1

    while True:
        review_ids, response = get_review_id_list(
            item_id,
            days_back=days_back,
            offset_days=offset_days,  # ‚úÖ ‡∏™‡πà‡∏á offset_days ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
            page=page,
            access_token=access_token
        )

        if response.get('code') == 'ApiCallLimit':
            wait_time = 2
            print(f"‚ö†Ô∏è Rate limit ‡πÄ‡∏à‡∏≠! ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(wait_time)
            continue

        if not review_ids:
            break

        all_review_ids.extend(review_ids)
        page += 1

        time.sleep(2)

    print(f"‡∏£‡∏ß‡∏° Review ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á item_id {item_id}: {len(all_review_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("üÜî Review ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", all_review_ids)
    return all_review_ids


def get_review_details_by_ids(review_id_list):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Lazada API (/review/seller/list/v2)
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ review_id_list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å /review/seller/history/list
    """
    if not review_id_list:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Review ID ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        return []

    print(f"üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(review_id_list)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)...")

    response = call_lazada_api(
        endpoint="/review/seller/list/v2",
        method="GET",
        params={
            "id_list": review_id_list   # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô list
        }
    )

    print(f"üÜî Request ID: {response.get('request_id', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}")

    if not response or response.get("code") != "0" or not response.get("success"):
        print("‚ùå Error fetching review details:", response)
        return []

    data = response.get("data", {})
    reviews = data.get("review_list", [])

    if not reviews:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô response")
        return []
    time.sleep(1)
    print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(reviews)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("\nüéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏î‡∏¥‡∏ö ")
    print(json.dumps(reviews, indent=2, ensure_ascii=False))
    return reviews

def lazada_fetch_and_show_all_reviews_Retrieve_historical(LALA, days_back=7, num_rounds=12, limit=15):
    """
    ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Lazada ‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö
    ‡πÄ‡∏ä‡πà‡∏ô days_back=7, num_rounds=12  ‚Üí ‡∏î‡∏∂‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡∏£‡∏≠‡∏ö (7 ‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö = 84 ‡∏ß‡∏±‡∏ô)
    """
    import json, time
    from datetime import datetime, timedelta, timezone
    from database.all_database import save_reviews_to_db

    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Lazada ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {num_rounds} ‡∏£‡∏≠‡∏ö (‡∏£‡∏≠‡∏ö‡∏•‡∏∞ {days_back} ‡∏ß‡∏±‡∏ô)")

    # ‚úÖ ‡∏î‡∏∂‡∏á token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    token_data = get_latest_token("lazada", LALA)
    access_token = token_data["access_token"]

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_items = lazada_get_active_item_ids(limit=limit)
    total_all_reviews = []

    # üîÅ ‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    for round_num in range(num_rounds):
        offset_days = round_num * days_back
        print(f"\n‚èÆÔ∏è ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num + 1}/{num_rounds} ‚Üí ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {offset_days}-{offset_days + days_back} ‡∏ß‡∏±‡∏ô")

        items_with_reviews = {}
        total_reviews = 0

        # ‡∏î‡∏∂‡∏á review_id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        for item_id in all_items:
            all_reviews = get_all_review_ids_by_item_id(
                item_id,
                days_back=days_back,
                offset_days=offset_days,
                access_token=access_token
            )

            if all_reviews:
                items_with_reviews[item_id] = all_reviews
                total_reviews += len(all_reviews)

            print(f"üì¶ item_id {item_id} ‚Üí ‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß {len(all_reviews)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            time.sleep(2)

        # ‡∏£‡∏ß‡∏° review_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        all_review_ids_flat = [rid for ids in items_with_reviews.values() for rid in ids]
        print(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_review_ids_flat)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å {len(items_with_reviews)} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num+1})")
        print( items_with_reviews)


        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        review_details = get_review_details_by_ids(all_review_ids_flat)
        formatted_reviews = []

        for r in review_details:
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‚Üí datetime (‡πÇ‡∏ã‡∏ô‡πÑ‡∏ó‡∏¢ +7)
            timestamp = r.get("create_time") or r.get("submit_time")
            if timestamp:
                try:
                    date_created = (
                        datetime.fromtimestamp(int(timestamp) / 1000, tz=timezone.utc) + timedelta(hours=7)
                    ).strftime("%Y-%m-%d %H:%M:%S")
                except Exception as e:
                    print(f"‚ö†Ô∏è ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö review_id {r.get('id')}: {e}")
                    date_created = None
            else:
                date_created = None

            formatted_reviews.append({
                "id": r["id"],  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å review_id ‚Üí id
                "review": r.get("review_content") or r.get("review"),  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å review_content ‚Üí review
                "date_created": date_created,
                "rating": r.get("product_rating") or r.get("ratings", {}).get("product_rating"),
                "product_id": r.get("product_id") or r.get("item_id")
            })

        save_reviews_to_db(
            reviews=formatted_reviews,
            platform="lazada",
            shop_id=str(LALA)
        )
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß {len(formatted_reviews)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num+1})")
 
        total_all_reviews.extend(formatted_reviews)

        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
        time.sleep(2)

    # üîö ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    print(f"\nüéØ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(total_all_reviews)} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡∏à‡∏≤‡∏Å {num_rounds} ‡∏£‡∏≠‡∏ö ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß!")
    print("\nüéØ nüéØ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î1111111111 (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á)")
    print(json.dumps(total_all_reviews, indent=2, ensure_ascii=False))
    return total_all_reviews



def lazada_fetch_review_by_id(review_id, LALA):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Lazada ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ review_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    print(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Lazada (review_id={review_id})")

    # 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    token_data = get_latest_token("lazada", LALA)
    access_token = token_data["access_token"]

    # 2Ô∏è‚É£ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lazada API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    response = call_lazada_api(
        endpoint="/review/seller/list/v2",
        method="GET",
        params={
            "id_list": [review_id]  # ‚úÖ Lazada ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ list ‡πÅ‡∏°‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 1 id
        },
        access_token=access_token
    )

    # 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response
    if not response or response.get("code") != "0" or not response.get("success"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ:", response)
        return None

    data = response.get("data", {})
    reviews = data.get("review_list", [])

    if not reviews:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö review_id ‡∏ô‡∏µ‡πâ")
        return None

    # 4Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    r = reviews[0]
    timestamp = r.get("create_time") or r.get("submit_time")
    if timestamp:
        date_created = (
            datetime.fromtimestamp(int(timestamp) / 1000, tz=timezone.utc) + timedelta(hours=7)
        ).strftime("%Y-%m-%d %H:%M:%S")
    else:
        date_created = None

    formatted_review = {
        "id": r.get("id"),
        "review": r.get("review_content") or r.get("review"),
        "date_created": date_created,
        "rating": r.get("product_rating") or r.get("ratings", {}).get("product_rating"),
        "product_id": r.get("product_id") or r.get("item_id")
    }

    # 5Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢ ‡πÜ
    print("\n‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:")
    print(json.dumps(formatted_review, indent=4, ensure_ascii=False))

    # 6Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    save_reviews_to_db(
        reviews=[formatted_review],
        platform="lazada",
        shop_id=str(LALA)
    )

    print("üíæ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    return formatted_review  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ lazada_fetch_review_by_id(985301659179601, LALA)
# ===== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô =====
if __name__ == "__main__":
    # ‡∏î‡∏∂‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏£‡∏≠‡∏ö √ó 7 ‡∏ß‡∏±‡∏ô = 21 ‡∏ß‡∏±‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    # lazada_fetch_and_show_all_reviews_Retrieve_historical(LALA, days_back=7, num_rounds=3)


    # # ‡∏î‡∏∂‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡∏£‡∏≠‡∏ö √ó 7 ‡∏ß‡∏±‡∏ô = 84 ‡∏ß‡∏±‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    lazada_fetch_and_show_all_reviews_Retrieve_historical(LALA, days_back=7, num_rounds=12)


