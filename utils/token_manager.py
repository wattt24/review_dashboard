# ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Google Sheet ‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á token ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° (Shopee, Lazada, Facebook ‡∏Ø‡∏•‡∏Ø) 
# utils/token_manager.py
import os , json
import gspread
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials 
import streamlit as st
from utils.config import GOOGLE_SHEET_ID

# ===== Google Sheet Setup =====
scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
# utils/token_manager.py
#‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet
def get_gspread_client():
    """
    ‡πÉ‡∏ä‡πâ Service Account JSON ‡∏à‡∏≤‡∏Å Environment variable (Render) ‡∏´‡∏£‡∏∑‡∏≠ st.secrets (Streamlit Cloud)
    """
    service_account_json = os.environ.get("SERVICE_ACCOUNT_JSON")
    if service_account_json:
        # Render / env var ‡πÄ‡∏õ‡πá‡∏ô string JSON
        service_account_info = json.loads(service_account_json)
    else:
        # Streamlit Cloud / st.secrets ‡πÄ‡∏õ‡πá‡∏ô dict
        service_account_info = dict(st.secrets["SERVICE_ACCOUNT_JSON"])

    creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
    return gspread.authorize(creds)

# ===== Load Google Sheet =====
client = get_gspread_client()
# GOOGLE_SHEET = os.environ.get("GOOGLE_SHEET_ID") or st.secrets["GOOGLE_SHEET_ID"]
# GOOGLE_SHEET = os.environ.get("GOOGLE_SHEET_ID")
# if not GOOGLE_SHEET:
#     raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_SHEET_ID ‡πÉ‡∏ô os.environ")

# sheet = client.open_by_key(GOOGLE_SHEET).sheet1
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
# ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sheet ‡πÉ‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏á‡πà‡∏≤‡∏¢ 
def get_sheet():
    return sheet
# ‡∏Ñ‡∏≥‡∏™‡∏∞‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ / sheet = get_sheet()  / ‡πÄ‡∏≠‡∏≤ sheet ‡∏°‡∏≤‡πÉ‡∏ä‡πâ

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡∏•‡∏á Google Sheet
def save_token(platform, account_id, access_token, refresh_token, expires_in=None, refresh_expires_in=None):
    now = datetime.now()
    # Access Token expiry
    expired_at = (now + timedelta(seconds=expires_in)).isoformat() if expires_in else ""

    # Refresh Token expiry
    refresh_expired_at = ""
    if platform.lower() == "shopee":
        # Shopee refresh token ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏ß‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á
        refresh_expired_at = (now + timedelta(days=30)).isoformat()
    elif refresh_expires_in:  
        # Lazada ‡∏´‡∏£‡∏∑‡∏≠ platform ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤
        refresh_expired_at = (now + timedelta(seconds=refresh_expires_in)).isoformat()

    account_id_str = str(account_id).strip()
    
    try:
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö platform + account_id
        cell_platform = sheet.find(str(platform).strip(), in_column=1)  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ platform ‡∏≠‡∏¢‡∏π‡πà column A
        row_idx = cell_platform.row
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö account_id ‡∏î‡πâ‡∏ß‡∏¢
        if str(sheet.cell(row_idx, 2).value).strip() == account_id_str:  # account_id column B
            # update ‡πÅ‡∏ñ‡∏ß
            sheet.update(f"A{row_idx}:G{row_idx}", [[
                platform, account_id_str, access_token, refresh_token, expired_at, refresh_expired_at, datetime.now().isoformat()
            ]])
            return
    except gspread.CellNotFound:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí append row ‡πÉ‡∏´‡∏°‡πà
        sheet.append_row([
            platform, account_id_str, access_token, refresh_token, expired_at, refresh_expired_at, datetime.now().isoformat()
        ])


# ‡∏î‡∏∂‡∏á Token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
def get_latest_token(platform, account_id):
    try:
        records = sheet.get_all_records()
        account_id_str = str(account_id).strip()
        print(f"Searching token for {platform}:{account_id_str}")
        for record in records:
            print(record.get("platform"), record.get("account_id"))
            if str(record.get("platform", "")).strip().lower() == str(platform).strip().lower() \
            and str(record.get("account_id", "")).strip() == account_id_str:
                return {
                    "access_token": record.get("access_token", ""),
                    "refresh_token": record.get("refresh_token", ""),
                    "expired_at": record.get("expired_at"),
                    "refresh_expired_at": record.get("refresh_expired_at")
                }

    except Exception as e:
        print("‚ùå get_latest_token error:", str(e))
    return None


# # ===== Auto-refresh token =====
# def auto_refresh_token(platform, account_id, force=False):
#     print(f"[{datetime.now().isoformat()}] ‚ö° Checking token for {platform}:{account_id}")
#     token_data = get_latest_token(platform, account_id)
#     if not token_data:
#         print(f"‚ùå No token found for {platform}:{account_id}")
#         return None

#     # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏≤‡∏¢‡∏∏ token
#     expired = True
#     expired_at = token_data.get("expired_at")
#     if expired_at:
#         expired_at_dt = datetime.fromisoformat(expired_at)
#         expired = expired_at_dt <= datetime.now()

#     # üü¢ ‡∏ñ‡πâ‡∏≤ token ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh
#     if not expired and not force:
#         print(f"[{datetime.now().isoformat()}] ‚è≥ Token still valid, using existing one")
#         return token_data["access_token"]

#     # üîÑ ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠ force=True ‚Üí refresh
#     try:
#         if platform == "shopee":
#             from services.shopee_auth import shopee_refresh_access_token as shopee_refresh_token
#             print(f"üîÑ Trying to refresh Shopee token for shop_id={account_id}")
#             new_data = shopee_refresh_token(account_id, token_data["refresh_token"])

#             if not new_data or "access_token" not in new_data:
#                 print(f"‚ùå Shopee refresh failed. Response: {new_data}")
#                 return None

#             save_token(platform, account_id,
#                        new_data["access_token"],
#                        new_data["refresh_token"],
#                        new_data.get("expire_in", 0),
#                        new_data.get("refresh_expires_in", 0))
            
#             print(f"[{datetime.now().isoformat()}] ‚úÖ Shopee token refreshed")
#             return new_data["access_token"]
#         elif platform == "lazada":
#             from services.lazada_auth import lazada_refresh_token as lazada_refresh_token
#             new_data = lazada_refresh_token(token_data["refresh_token"], account_id)
#             save_token(platform, account_id,
#                        new_data["access_token"],
#                        new_data["refresh_token"],
#                        new_data.get("expires_in", 0),
#                        new_data.get("refresh_expires_in", 0))
#             print(f"[{datetime.now().isoformat()}] ‚úÖ Lazada token refreshed")
#             return new_data["access_token"]

#         elif platform in ["facebook", "facebook"]:
#             from services.facebook_auth import refresh_facebook_token
#             new_data = refresh_facebook_token(token_data["access_token"], account_id)

#             if "access_token" in new_data:
#                 # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook Page ‡∏´‡∏•‡∏≤‡∏¢ account ‡πÉ‡∏ä‡πâ token ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí update ‡∏ó‡∏∏‡∏Å row
#                 records = sheet.get_all_records()
#                 for idx, record in enumerate(records, start=2):
#                     if record["platform"] == platform and record["access_token"] == token_data["access_token"]:
#                         sheet.update(f"C{idx}", new_data["access_token"])
#                         if "expires_in" in new_data:
#                             expired_at = (datetime.now() + timedelta(seconds=new_data["expires_in"])).isoformat()
#                             sheet.update(f"E{idx}", expired_at)
#                         sheet.update(f"G{idx}", datetime.now().isoformat())
#                 print(f"Updating token for {platform}:{account_id} at row {idx}")
#                 print(f"[{datetime.now().isoformat()}] ‚úÖ Facebook token refreshed for all related accounts")
#                 print("Token Data Fetched:", token_data)
#                 return new_data["access_token"]
#         else:
#             print(f"‚ùå Auto-refresh not implemented for {platform}")
#             return token_data["access_token"]

#     except Exception as e:
#         print(f"‚ùå Auto-refresh failed for-- {platform}:{account_id} - {str(e)}")
#         return None








