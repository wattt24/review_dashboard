# api/shopee_api.py
import datetime
import time, hmac, hashlib, requests, json
import urllib.parse
from utils.config import (SHOPEE_PARTNER_ID, SHOPEE_PARTNER_SECRET, SHOPEE_SHOP_ID)
from utils.token_manager import get_latest_token
from database.all_database import save_reviews_to_db
import time, datetime

# ===== Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å Google Sheet =====
def get_shopee_access_token(shop_id: str, force_refresh: bool = False):
    """
    ‡∏î‡∏∂‡∏á access_token ‡∏à‡∏≤‡∏Å Google Sheet ‡πÅ‡∏•‡∏∞ auto-refresh ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    """
    token = get_latest_token("shopee", shop_id)
    if token:
        return token
    # fallback ‡∏Å‡∏£‡∏ì‡∏µ refresh ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏î‡∏∂‡∏á token ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    token_data = get_latest_token("shopee", shop_id)
    return token_data["access_token"] if token_data else None


# ======= ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á sign =======
def shopee_generate_sign(path, timestamp, shop_id, access_token ):
    # print(">>> DEBUG shop_id param:", shop_id)
    # print(">>> DEBUG access_token param:", access_token)
    base_string = f"{SHOPEE_PARTNER_ID}{path}{timestamp}{access_token}{shop_id}"

    sign = hmac.new(
        SHOPEE_PARTNER_SECRET.encode("utf-8"),
        base_string.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()
    # print("BASE STRING:", base_string)
    # print(" SIGN:", sign)  # ‡∏î‡∏π sign ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    return sign

# ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
def get_shopee_shop_info(shop_id): #    get_shopee_shop_info(SHOPEE_SHOP_ID)
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Shopee API
    """
    token_data = get_latest_token("shopee", shop_id)
    if not token_data:
        raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Shopee access_token")
    access_token = token_data["access_token"]
    path = "/api/v2/shop/get_shop_info"
    timestamp = int(time.time())

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á sign
    sign = shopee_generate_sign(path, timestamp, shop_id, access_token)

    # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö URL ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    url = (
        f"https://partner.shopeemobile.com{path}"
        f"?access_token={access_token}"
        f"&partner_id={SHOPEE_PARTNER_ID}"
        f"&shop_id={shop_id}"
        f"&timestamp={timestamp}"
        f"&sign={sign}"
    )

    print("üîπ Base string:", f"{SHOPEE_PARTNER_ID}{path}{timestamp}{access_token}{shop_id}")
    print("üîπ Sign:", sign)
    print("üîπ URL:", url)
    print("üîπ Timestamp:", timestamp)
    print("üîπ Human time:", datetime.datetime.fromtimestamp(timestamp))

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    response = requests.get(url)
    data = response.json()

    print("\nüì¶ Shopee Shop Info Response:")
    print(data)

    return data
# ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π global ‡∏Ç‡∏≠‡∏á Shopee
def shopee_get_categories(shop_id, language="en"):
    path = "/api/v2/product/get_category"
    base_url = "https://partner.shopeemobile.com"
    timestamp = int(time.time())

    token_data = get_latest_token("shopee", shop_id)
    if not token_data:
        raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Shopee access_token")
    access_token = token_data["access_token"]

    shop_id = int(shop_id)
    sign = shopee_generate_sign(path, timestamp, shop_id, access_token)

    params = {
        "partner_id": SHOPEE_PARTNER_ID,
        "timestamp": timestamp,
        "access_token": access_token,
        "shop_id": shop_id,
        "sign": sign,
        "language": language
    }

    url = f"{base_url}{path}"
    response = requests.get(url, params=params)
    data = response.json()
    print(json.dumps(data, indent=2, ensure_ascii=False)) 
    return response.json()


# ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ API ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
# # ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ
# # params = {
# #     "partner_id": partner_id,
# #     "timestamp": timestamp,
# #     "shop_id": shop_id,
# #     "access_token": access_token,
# #     "sign": sign
# # }
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ

# params = {
#     "partner_id": partner_id,
#     "timestamp": timestamp,
#     "shop_id": shop_id,
#     "access_token": access_token,
#     "sign": sign,
#     "offset": 0,
#     "page_size": 20,
#     "item_status": ["NORMAL"]
#     # "item_status": ["NORMAL", "UNLIST"]
# }



# ======= ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API =======
def shopee_get_items_list():
    path = "/api/v2/product/get_item_list"
    timestamp = int(time.time())
    token_data = get_latest_token("shopee", SHOPEE_SHOP_ID)
    access_token = token_data.get("access_token") if token_data else None
    if not access_token:
        raise Exception("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Shopee shop_id ‡∏ô‡∏µ‡πâ")
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generate sign
    sign = shopee_generate_sign(path, timestamp, SHOPEE_SHOP_ID, access_token)

    url = f"https://partner.shopeemobile.com{path}"

    all_items = []
    offset = 0
    page_size = 20  # ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

    while True:
        timestamp = int(time.time())
        sign = shopee_generate_sign(path, timestamp, SHOPEE_SHOP_ID, access_token)

        params = {
            "partner_id": SHOPEE_PARTNER_ID,
            "timestamp": timestamp,
            "shop_id": SHOPEE_SHOP_ID,
            "access_token": access_token,
            "sign": sign,
            "offset": offset,
            "page_size": page_size,
            "item_status": ["NORMAL"]
        }

        response = requests.get(url, params=params)
        data = response.json() # ‡πÅ‡∏™‡∏î‡∏á response  ‡πÅ‡∏õ‡∏•‡∏á Response object ‡πÄ‡∏õ‡πá‡∏ô dict

        # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô print
        items = data.get("response", {}).get("item", [])

        print(f"Offset: {offset}")
        print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {len(items)}")
        print(f"has_next_page: {data.get('response', {}).get('has_next_page')}")
        print(f"total_count: {data.get('response', {}).get('total_count')}")

        all_items.extend(items)

        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• offset {offset} ‡πÑ‡∏î‡πâ {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        if not data.get("response", {}).get("has_next_page", False):
            break

        offset = data.get("response", {}).get("next_offset", 0)
        time.sleep(1)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit

        print(f"status code: {requests.get(url, params=params).status_code}")
        print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å response.json() ")
        print("---------------------‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1---------------------")
        items = response.json().get("response", {}).get("item", [])
        for i, item in enumerate(items, 1):
            print(f"{i}. item_id: {item['item_id']} | status: {item['item_status']} | updated: {datetime.datetime.fromtimestamp(item['update_time'])}")
        print("----------------------     --------------------")
        # print("---------------------‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 ---------------------")
        # print("‡πÅ‡∏™‡∏î‡∏á response ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î Python dictionary (dict)")
        # print(response.json())
        # print("----------------------     --------------------")

        # print("---------------------‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 3 ---------------------")
   

        # print(json.dumps(data, indent=2, ensure_ascii=False))      # data = response.json()  
        # print("----------------------     --------------------")
    return all_items
def get_shopee_comments(item_id=None, comment_id=None, page_size=50):
    url = "https://partner.shopeemobile.com/api/v2/product/get_comment"
    path = "/api/v2/product/get_comment"
    comments = []
    cursor = ""
    token_data = get_latest_token("shopee", SHOPEE_SHOP_ID)
    access_token = token_data.get("access_token") if token_data else None
    if not access_token:
        raise Exception("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Shopee shop_id ‡∏ô‡∏µ‡πâ")
    while True:
        timestamp = int(time.time())
        sign = shopee_generate_sign(path, timestamp, SHOPEE_SHOP_ID, access_token)

        params = {
            "partner_id": SHOPEE_PARTNER_ID,
            "shop_id": SHOPEE_SHOP_ID,
            "access_token": access_token,
            "timestamp": timestamp,
            "sign": sign,
            "cursor": cursor,
            "page_size": page_size
        }

        if item_id:
            params["item_id"] = item_id
        if comment_id:
            params["comment_id"] = comment_id

        response = requests.get(url, params=params)
        data = response.json()

        if "response" not in data or "item_comment_list" not in data["response"]:
            break

        batch = data["response"]["item_comment_list"]
        comments.extend(batch)

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor = data["response"].get("next_cursor", "")
        if not cursor:
            break

        time.sleep(1)  # ‡∏Å‡∏±‡∏ô rate limit

    return comments

def shopee_get_all_comments_from_items_list():
    """
    ‡∏î‡∏∂‡∏á item_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Shopee ‚Üí ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á comment ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ item_id ‚Üí ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å get_shopee_comments
    """
    print("üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ shopee_get_items_list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...")
    all_items = shopee_get_items_list()  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°

    if not all_items:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏î ‡πÜ ‡∏à‡∏≤‡∏Å Shopee")
        return []

    all_comments = []

    print(f"üì¶ ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {len(all_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ item...")
    for index, item in enumerate(all_items, start=1):
        item_id = item.get("item_id")
        if not item_id:
            print(f"‚ö†Ô∏è item ‡πÑ‡∏°‡πà‡∏°‡∏µ item_id ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏õ")
            continue

        print(f"üîé ({index}/{len(all_items)}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á comment ‡∏Ç‡∏≠‡∏á item_id: {item_id}")
        try:
            comments = get_shopee_comments(item_id=item_id)

            if comments:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° item_id ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ comment (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
                for c in comments:
                    c["item_id"] = item_id

                all_comments.extend(comments)
                print(f"‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ {len(comments)} comments ‡∏à‡∏≤‡∏Å item_id {item_id}‚úÖ")
                print(json.dumps(comments, indent=2, ensure_ascii=False))
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ comment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö item_id {item_id}")

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á comment ‡∏Ç‡∏≠‡∏á item_id {item_id}: {e}")

        time.sleep(1)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Rate Limit

    print(f"\nüéØ ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_comments)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å {len(all_items)} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    
    return all_comments
def shopee_forward_get_all_reviews_comments_save_to_db(): # shopee_forward_get_all_reviews_comments_save_to_db()
    """
   ‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏áreviews_commentsee ‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Shopee...")
    all_comments = shopee_get_all_comments_from_items_list()  # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    if not all_comments:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Shopee")
        return

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà save_reviews_to_db ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    formatted_reviews = []
    for c in all_comments:
        review_id = str(c.get("comment_id"))
        review_text = c.get("comment", "")
        rating = c.get("rating_star", None)
        item_id = c.get("item_id", None)
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        ts = c.get("create_time")
        if ts:
            review_date = datetime.datetime.fromtimestamp(ts)

        else:
            review_date = datetime.now()

        formatted_reviews.append({
            "id": review_id,
            "review": review_text,
            "rating": rating,
            "product_id": item_id,
            "date_created": review_date
        })

    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    save_reviews_to_db(formatted_reviews, platform="shopee", shop_id=str(SHOPEE_SHOP_ID))
    print("üéØ ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")



# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
if __name__ == "__main__":
    shopee_forward_get_all_reviews_comments_save_to_db()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
